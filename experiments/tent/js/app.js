// Generated by CoffeeScript 1.4.0
(function() {
  var Abstract, AbstractButton, AbstractChapter, AbstractScene, AppView, AssetLoader, AudioManager, AudioManagerEvents, BaseAssets, BatchLoadModel, Canvas, Carnival, CollectionBatchLoad, CollectionLocale, CollectionSpriteSheets, CollectionTemplates, Credits, Cutout, CutoutCanvas, CutoutCharacter, CutoutPreview, CutoutSelection, Footer, Hotspot, IFLColorCorrectionShader, IFLLoader, IFLPhongFresnelShader, IFLSkyCubeShader, IFLTerrainLambertShader, LandingOpenings, LandingPage, Loading, LoadingCard, Locale, LocaleModel, Logo, LogoParticles, MainMenu, OpeningTitles, Particle, Particles, Payoff, PreloaderEvents, Requester, Router, SSAsset, Share, ShareBox, ShareMenu, ShareOverlay, ShortURL, SimpleButton, SpriteSheetModel, StaticOverlay, Storm, SubLoader, TemplateModel, Templates, Terms, Trailer, WebCam, WebcamCTA, Wrapper, Zoetrope, ZoetropeMakeMovie, ZoetropePreview, ZoetropeTimeline, ZoetropeWebcamFeed,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  IFLColorCorrectionShader = (function() {

    function IFLColorCorrectionShader() {}

    IFLColorCorrectionShader.prototype.uniforms = {
      "tDiffuse": {
        type: "t",
        value: null
      },
      "saturation": {
        type: "v4",
        value: new THREE.Vector4(0, 0, 0, 1)
      },
      "powRGB": {
        type: "v3",
        value: new THREE.Vector3(1, 1, 1)
      },
      "mulRGB": {
        type: "v3",
        value: new THREE.Vector3(1, 1, 1)
      },
      "vignetteOffset": {
        type: "f",
        value: 1.2
      },
      "vignetteDarkness": {
        type: "f",
        value: 1.3
      }
    };

    IFLColorCorrectionShader.prototype.vertexShader = ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n");

    IFLColorCorrectionShader.prototype.fragmentShader = ["uniform sampler2D tDiffuse;", "uniform vec3 powRGB;", "uniform vec3 mulRGB;", "uniform vec4 saturation;", "uniform float vignetteOffset;", "uniform float vignetteDarkness;", "varying vec2 vUv;", "void main() {", "gl_FragColor = texture2D( tDiffuse, vUv );", "gl_FragColor.xyz = mulRGB * pow( gl_FragColor.xyz, powRGB );", "gl_FragColor.r = clamp(gl_FragColor.r, 0.0, 1.0);", "gl_FragColor.g = clamp(gl_FragColor.g, 0.0, 1.0);", "gl_FragColor.b = clamp(gl_FragColor.b, 0.0, 1.0);", "vec3 luminanceWeights = vec3(0.2126,0.7152,0.0722);", "float luminance = dot(gl_FragColor.xyz,luminanceWeights);", "vec3 greyscale = vec3(luminance,luminance,luminance);", "gl_FragColor.xyz = mix(gl_FragColor.xyz,greyscale.xyz,saturation.xyz);", "gl_FragColor.r = clamp(gl_FragColor.r, 0.0, 1.0);", "gl_FragColor.g = clamp(gl_FragColor.g, 0.0, 1.0);", "gl_FragColor.b = clamp(gl_FragColor.b, 0.0, 1.0);", "vec2 uv = ( vUv - vec2( 0.5 ) ) * vec2( vignetteOffset );", "gl_FragColor = vec4( mix( gl_FragColor.rgb, vec3( 1.0 - vignetteDarkness ), dot( uv, uv ) ), gl_FragColor.a );", "}"].join("\n");

    return IFLColorCorrectionShader;

  })();

  IFLPhongFresnelShader = (function() {

    function IFLPhongFresnelShader() {}

    IFLPhongFresnelShader.prototype.uniforms = THREE.UniformsUtils.merge([
      THREE.UniformsLib["common"], THREE.UniformsLib["bump"], THREE.UniformsLib["normalmap"], THREE.UniformsLib["fog"], THREE.UniformsLib["shadowmap"], {
        "ambient": {
          type: "c",
          value: new THREE.Color(0xffffff)
        },
        "emissive": {
          type: "c",
          value: new THREE.Color(0x000000)
        },
        "specular": {
          type: "c",
          value: new THREE.Color(0x111111)
        },
        "shininess": {
          type: "f",
          value: 30
        },
        "wrapRGB": {
          type: "v3",
          value: new THREE.Vector3(1, 1, 1)
        },
        "tAux": {
          type: "t",
          value: null
        },
        "mFresnelBias": {
          type: "f",
          value: 0
        },
        "mFresnelGain": {
          type: "f",
          value: 1
        },
        "mFresnelPower": {
          type: "f",
          value: 0.0
        }
      }
    ]);

    IFLPhongFresnelShader.prototype.vertexShader = ["#define PHONG", "varying vec3 vViewPosition;", "varying vec3 vNormal;", "varying vec3 vNWorld;", "varying vec3 vI;", THREE.ShaderChunk["map_pars_vertex"], THREE.ShaderChunk["lightmap_pars_vertex"], "varying vec3 vReflect;", "uniform float refractionRatio;", "uniform bool useRefract;", "varying vec3 vWorldPosition;", THREE.ShaderChunk["morphtarget_pars_vertex"], THREE.ShaderChunk["skinning_pars_vertex"], "void main() {", THREE.ShaderChunk["map_vertex"], THREE.ShaderChunk["lightmap_vertex"], THREE.ShaderChunk["morphnormal_vertex"], THREE.ShaderChunk["skinbase_vertex"], THREE.ShaderChunk["skinnormal_vertex"], THREE.ShaderChunk["defaultnormal_vertex"], "vNormal = objectNormal;", THREE.ShaderChunk["morphtarget_vertex"], THREE.ShaderChunk["skinning_vertex"], THREE.ShaderChunk["default_vertex"], "vViewPosition = -mvPosition.xyz;", THREE.ShaderChunk["worldpos_vertex"], "#if defined( USE_ENVMAP )", "vNWorld = mat3( modelMatrix[ 0 ].xyz, modelMatrix[ 1 ].xyz, modelMatrix[ 2 ].xyz ) * objectNormal;", "vI = normalize( mPosition.xyz - cameraPosition );", "if ( useRefract ) {", "vReflect = refract( vI, normalize( vNWorld.xyz ), refractionRatio );", "} else {", "vReflect = reflect( vI, normalize( vNWorld.xyz ) );", "}", "#endif", "vWorldPosition = mPosition.xyz;", "}"].join("\n");

    IFLPhongFresnelShader.prototype.fragmentShader = ["uniform vec3 diffuse;", "uniform float opacity;", "uniform vec3 ambient;", "uniform vec3 emissive;", "uniform vec3 specular;", "uniform float shininess;", "uniform sampler2D tAux;", "uniform float mFresnelBias;", "uniform float mFresnelGain;", "uniform float mFresnelPower;", "varying vec3 vNWorld;", "varying vec3 vI;", THREE.ShaderChunk["map_pars_fragment"], THREE.ShaderChunk["lightmap_pars_fragment"], "#ifdef USE_ENVMAP", "varying vec3 vReflect;", "uniform float reflectivity;", "uniform samplerCube envMap;", "uniform float flipEnvMap;", "uniform int combine;", "#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )", "uniform bool useRefract;", "uniform float refractionRatio;", "#endif", "#endif", THREE.ShaderChunk["fog_pars_fragment"], "varying vec3 vWorldPosition;", "varying vec3 vViewPosition;", "varying vec3 vNormal;", THREE.ShaderChunk["shadowmap_pars_fragment"], "#ifdef USE_NORMALMAP", "uniform sampler2D normalMap;", "uniform vec2 normalScale;", "vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {", "vec3 q0 = dFdx( eye_pos.xyz );", "vec3 q1 = dFdy( eye_pos.xyz );", "vec2 st0 = dFdx( vUv.st );", "vec2 st1 = dFdy( vUv.st );", "vec3 S = normalize(  q0 * st1.t - q1 * st0.t );", "vec3 T = normalize( -q0 * st1.s + q1 * st0.s );", "vec3 N = normalize( surf_norm );", "vec3 nmap = texture2D( normalMap, vUv ).xyz;", "nmap.y = 1.0 - nmap.y;", "vec3 mapN = nmap * 2.0 - 1.0;", "mapN.xy = normalScale * mapN.xy;", "mat3 tsn = mat3( S, T, N );", "return normalize( tsn * mapN );", "}", "#endif", THREE.ShaderChunk["specularmap_pars_fragment"], "void main() {", "gl_FragColor = vec4( vec3 ( 1.0 ), opacity );", "#ifdef USE_MAP", "#ifdef GAMMA_INPUT", "vec4 texelColor = texture2D( map, vUv );", "texelColor.xyz *= texelColor.xyz;", "gl_FragColor = gl_FragColor * texelColor;", "#else", "gl_FragColor = gl_FragColor * texture2D( map, vUv );", "gl_FragColor.xyz *= 1.5;", "#endif", "#endif", THREE.ShaderChunk["alphatest_fragment"], THREE.ShaderChunk["specularmap_fragment"], "vec3 viewPosition = normalize( vViewPosition );", "vec3 normal = normalize( vNormal );", "#ifdef USE_ENVMAP", "vec3 reflectVec;", "#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )", "normal = perturbNormal2Arb( -viewPosition, normal );", "vec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );", "if ( useRefract ) {", "reflectVec = refract( cameraToVertex, normal, refractionRatio );", "} else { ", "reflectVec = reflect( cameraToVertex, normal );", "}", "#else", "reflectVec = vReflect;", "#endif", "#ifdef DOUBLE_SIDED", "float flipNormal = ( -1.0 + 2.0 * float( gl_FrontFacing ) );", "vec4 cubeColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );", "#else", "vec4 cubeColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );", "#endif", "#ifdef GAMMA_INPUT", "cubeColor.xyz *= cubeColor.xyz;", "#else", "cubeColor.xyz *= 2.0;", "#endif", "vec4 texelAux = texture2D( tAux, vUv );", "float fresnelChan = clamp(texelAux.r, 0.0, 1.0);", "float fresnelFact = clamp( mFresnelPower + (5.0 * (1.0 - texelAux.r)), 0.0, 5.0);", "#ifdef DOUBLE_SIDED", "float vFresnel = pow( 1.0 + dot( vI , flipNormal * normal ), fresnelFact );", "#else", "float vFresnel = pow( 1.0 + dot( vI , normal ), fresnelFact );", "#endif", "vFresnel = clamp( vFresnel, 0.0, 1.0 );", "#ifdef USE_SPECULARMAP", "gl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz * texelSpecular.xyz ,  vFresnel * specularStrength   );", "#else", "gl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz,  vFresnel * specularStrength  );", "#endif", "#endif", "#ifdef GAMMA_OUTPUT", "float d = 1.0/1.8;", "gl_FragColor.rgb = pow( gl_FragColor.rgb , vec3(d,d,d) );", "#endif", THREE.ShaderChunk["fog_fragment"], "}"].join("\n");

    return IFLPhongFresnelShader;

  })();

  IFLSkyCubeShader = (function() {

    function IFLSkyCubeShader() {}

    IFLSkyCubeShader.prototype.uniforms = {
      "tCube": {
        type: "t",
        value: null
      },
      "tFlip": {
        type: "f",
        value: -1
      }
    };

    IFLSkyCubeShader.prototype.vertexShader = ["varying vec3 vViewPosition;", "void main() {", "vec4 mPosition = modelMatrix * vec4( position, 1.0 );", "vViewPosition = cameraPosition - mPosition.xyz;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n");

    IFLSkyCubeShader.prototype.fragmentShader = ["uniform samplerCube tCube;", "uniform float tFlip;", "varying vec3 vViewPosition;", "void main() {", "vec3 wPos = cameraPosition - vViewPosition;", "gl_FragColor = textureCube( tCube, vec3( tFlip * wPos.x, wPos.yz ) );", "}"].join("\n");

    return IFLSkyCubeShader;

  })();

  IFLTerrainLambertShader = (function() {

    function IFLTerrainLambertShader() {}

    IFLTerrainLambertShader.prototype.uniforms = THREE.UniformsUtils.merge([
      THREE.UniformsLib["common"], THREE.UniformsLib["fog"], THREE.UniformsLib["lights"], THREE.UniformsLib["shadowmap"], {
        "tBlendmap": {
          type: "t",
          value: null
        },
        "offsetRepeatR": {
          type: "v4",
          value: new THREE.Vector4(1, 1, 1, 1)
        },
        "offsetRepeatG": {
          type: "v4",
          value: new THREE.Vector4(1, 1, 1, 1)
        },
        "offsetRepeatB": {
          type: "v4",
          value: new THREE.Vector4(1, 1, 1, 1)
        },
        "enableDiffuseR": {
          type: "i",
          value: 0
        },
        "enableDiffuseG": {
          type: "i",
          value: 0
        },
        "enableDiffuseB": {
          type: "i",
          value: 0
        },
        "tDiffuseR": {
          type: "t",
          value: null
        },
        "tDiffuseG": {
          type: "t",
          value: null
        },
        "tDiffuseB": {
          type: "t",
          value: null
        },
        "enableSpecularR": {
          type: "i",
          value: 0
        },
        "enableSpecularG": {
          type: "i",
          value: 0
        },
        "enableSpecularB": {
          type: "i",
          value: 0
        },
        "tSpecularR": {
          type: "t",
          value: null
        },
        "tSpecularG": {
          type: "t",
          value: null
        },
        "tSpecularB": {
          type: "t",
          value: null
        },
        "ambient": {
          type: "c",
          value: new THREE.Color(0xffffff)
        },
        "emissive": {
          type: "c",
          value: new THREE.Color(0x000000)
        },
        "wrapRGB": {
          type: "v3",
          value: new THREE.Vector3(1, 1, 1)
        }
      }
    ]);

    IFLTerrainLambertShader.prototype.vertexShader = ["#define LAMBERT", "varying vec3 vLightFront;", "#ifdef DOUBLE_SIDED", "varying vec3 vLightBack;", "#endif", THREE.ShaderChunk["map_pars_vertex"], "uniform vec4 offsetRepeatR;", "uniform vec4 offsetRepeatG;", "uniform vec4 offsetRepeatB;", "varying vec2 vUvUnscaled;", "varying vec2 vUvR;", "varying vec2 vUvG;", "varying vec2 vUvB;", THREE.ShaderChunk["envmap_pars_vertex"], THREE.ShaderChunk["lights_lambert_pars_vertex"], THREE.ShaderChunk["color_pars_vertex"], THREE.ShaderChunk["morphtarget_pars_vertex"], THREE.ShaderChunk["skinning_pars_vertex"], THREE.ShaderChunk["shadowmap_pars_vertex"], "void main() {", "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )", "vUv  = uv * offsetRepeat.zw + offsetRepeat.xy;", "vUvR = uv * offsetRepeatR.zw + offsetRepeatR.xy;", "vUvG = uv * offsetRepeatG.zw + offsetRepeatG.xy;", "vUvB = uv * offsetRepeatB.zw + offsetRepeatB.xy;", "vUvUnscaled = uv;", "#endif", THREE.ShaderChunk["color_vertex"], THREE.ShaderChunk["morphnormal_vertex"], THREE.ShaderChunk["skinbase_vertex"], THREE.ShaderChunk["skinnormal_vertex"], THREE.ShaderChunk["defaultnormal_vertex"], THREE.ShaderChunk["morphtarget_vertex"], THREE.ShaderChunk["skinning_vertex"], THREE.ShaderChunk["default_vertex"], THREE.ShaderChunk["worldpos_vertex"], THREE.ShaderChunk["envmap_vertex"], THREE.ShaderChunk["lights_lambert_vertex"], THREE.ShaderChunk["shadowmap_vertex"], "}"].join("\n");

    IFLTerrainLambertShader.prototype.fragmentShader = ["uniform float opacity;", "varying vec3 vLightFront;", "#ifdef DOUBLE_SIDED", "varying vec3 vLightBack;", "#endif", THREE.ShaderChunk["color_pars_fragment"], THREE.ShaderChunk["map_pars_fragment"], "uniform sampler2D tBlendmap;", "uniform bool enableDiffuseR;", "uniform bool enableDiffuseG;", "uniform bool enableDiffuseB;", "uniform sampler2D tDiffuseR;", "uniform sampler2D tDiffuseG;", "uniform sampler2D tDiffuseB;", "varying vec2 vUvUnscaled;", "varying vec2 vUvR;", "varying vec2 vUvG;", "varying vec2 vUvB;", "uniform sampler2D lightMap;", THREE.ShaderChunk["envmap_pars_fragment"], THREE.ShaderChunk["fog_pars_fragment"], THREE.ShaderChunk["shadowmap_pars_fragment"], THREE.ShaderChunk["specularmap_pars_fragment"], "uniform bool enableSpecularR;", "uniform bool enableSpecularG;", "uniform bool enableSpecularB;", "uniform sampler2D tSpecularR;", "uniform sampler2D tSpecularG;", "uniform sampler2D tSpecularB;", "void main() {", "gl_FragColor = vec4( vec3 ( 1.0 ), opacity );", "#ifdef USE_MAP", "#ifdef GAMMA_INPUT", "vec4 texelColor = texture2D( map, vUv );", "texelColor.xyz *= texelColor.xyz;", "gl_FragColor = gl_FragColor * texelColor;", "#else", "gl_FragColor = gl_FragColor * texture2D( map, vUv );", "#endif", "#ifdef USE_COLOR", "#else", "vec4 vColor = texture2D( tBlendmap, vUvUnscaled );", "#endif", "vec4 fragColorR;", "#ifdef GAMMA_INPUT", "fragColorR = texture2D( tDiffuseR, vUvR );", "fragColorR.xyz *= fragColorR.xyz;", "#else", "fragColorR = texture2D( tDiffuseR, vUvR );", "#endif", "gl_FragColor.xyz = mix( gl_FragColor.xyz, fragColorR.xyz, vColor.r );", "vec4 fragColorG;", "#ifdef GAMMA_INPUT", "fragColorG = texture2D( tDiffuseG, vUvG );", "fragColorG.xyz *= fragColorG.xyz;", "#else", "fragColorG = texture2D( tDiffuseG, vUvG );", "#endif", "gl_FragColor.xyz = mix( gl_FragColor.xyz, fragColorG.xyz, vColor.g );", "vec4 fragColorB;", "#ifdef GAMMA_INPUT", "fragColorB = texture2D( tDiffuseB, vUvB );", "fragColorB.xyz *= fragColorB.xyz;", "#else", "fragColorB = texture2D( tDiffuseB, vUvB );", "#endif", "gl_FragColor.xyz = mix( gl_FragColor.xyz, fragColorB.xyz, vColor.b );", "#endif", THREE.ShaderChunk["alphatest_fragment"], "float specularStrength;", "#ifdef USE_SPECULARMAP", "vec4 texelSpecular = texture2D( specularMap, vUv );", "#ifdef USE_COLOR", "if( enableSpecularR )", "texelSpecular = vec4( mix( texelSpecular.xyz, texture2D( tSpecularR, vUv ).xyz, vColor.r ), 1.0);", "if( enableSpecularG )", "texelSpecular = vec4( mix( texelSpecular.xyz, texture2D( tSpecularG, vUv ).xyz, vColor.g ), 1.0);", "if( enableSpecularR )", "texelSpecular = vec4( mix( texelSpecular.xyz, texture2D( tSpecularB, vUv ).xyz, vColor.b ), 1.0);", "#endif", "#else", "specularStrength = 1.0;", "#endif", "#ifdef DOUBLE_SIDED", "if ( gl_FrontFacing )", "gl_FragColor.xyz *= vLightFront;", "else", "gl_FragColor.xyz *= vLightBack;", "#else", "gl_FragColor.xyz *= vLightFront;", "#endif", "#ifdef USE_LIGHTMAP", "gl_FragColor = gl_FragColor * ( texture2D( lightMap, vUvUnscaled ) * 3.0 );", "#endif", THREE.ShaderChunk["envmap_fragment"], THREE.ShaderChunk["shadowmap_fragment"], "#ifdef GAMMA_OUTPUT", "float d = 1.0/1.8;", "#endif", THREE.ShaderChunk["fog_fragment"], "}"].join("\n");

    return IFLTerrainLambertShader;

  })();

  IFLLoader = (function() {

    IFLLoader.prototype.IFLVertexAttribute = {
      POSITION: 0,
      UV: 1,
      NORMALS: 2,
      TANGENTS: 3,
      BINORMALS: 4,
      TEX_TANGENTS: 5,
      TEX_BINORMALS: 6,
      COLOR: 7,
      JOINT_0: 8,
      JOINT_1: 9,
      JOINT_2: 10,
      JOINT_3: 11,
      JOINT_4: 12,
      JOINT_INDICES: 13,
      JOINT_WEIGHTS: 14,
      SECONDARY_UV: 15
    };

    IFLLoader.prototype.library = null;

    IFLLoader.prototype.callback = null;

    IFLLoader.prototype.callbackProgress = null;

    IFLLoader.prototype.worker = null;

    IFLLoader.prototype.convertTextureIndex = 0;

    IFLLoader.prototype.texCache = null;

    IFLLoader.prototype.matCache = null;

    IFLLoader.prototype.t = 0;

    IFLLoader.prototype.url = null;

    IFLLoader.prototype.loadingPhase = 0;

    IFLLoader.prototype.totalLoadingPhases = 4;

    IFLLoader.prototype.sky = null;

    function IFLLoader() {
      this.onXHRReadyStatusChange = __bind(this.onXHRReadyStatusChange, this);

      this.onXHRProgress = __bind(this.onXHRProgress, this);

      this.onWorkerMessage = __bind(this.onWorkerMessage, this);
      this.worker = new Worker('js/workers/iflworker.js');
      this.worker.onmessage = this.onWorkerMessage;
      this.texCache = {};
      this.matCache = {};
    }

    IFLLoader.prototype.onWorkerMessage = function(event) {
      var loaded, subtype, total;
      switch (event.data.type) {
        case "console":
          return console[event.data.action](event.data.msg);
        case "progress":
          loaded = event.data.data.progress;
          total = event.data.data.total;
          subtype = event.data.subtype;
          return this.handleProgress(loaded, total);
        default:
          return this[event.data.callback](event.data.data);
      }
    };

    IFLLoader.prototype.handleProgress = function(loaded, total) {
      var currentUnitBase, currentUnitProgress, totalLoaded, unit;
      if (this.callbackProgress != null) {
        unit = 100 / this.totalLoadingPhases;
        currentUnitBase = unit * this.loadingPhase;
        currentUnitProgress = (loaded * unit) / total;
        totalLoaded = currentUnitBase + currentUnitProgress;
        return this.callbackProgress(totalLoaded, 100);
      }
    };

    IFLLoader.prototype.load = function(url, callback, callbackProgress) {
      this.loadingPhase = 0;
      this.url = url;
      this.callback = callback;
      this.callbackProgress = callbackProgress;
      this.xhr = new XMLHttpRequest();
      this.xhr.onreadystatechange = this.onXHRReadyStatusChange;
      this.xhr.onprogress = this.onXHRProgress;
      this.xhr.open("GET", url, true);
      this.xhr.responseType = "arraybuffer";
      return this.xhr.send(null);
    };

    IFLLoader.prototype.onXHRProgress = function(event) {
      return this.handleProgress(event.loaded, event.total);
    };

    IFLLoader.prototype.onXHRReadyStatusChange = function() {
      var response, _ref;
      if (this.xhr.readyState === this.xhr.DONE) {
        if (this.xhr.status === 200 || this.xhr.status === 0) {
          response = (_ref = this.xhr.response) != null ? _ref : this.xhr.mozResponseArrayBuffer;
          this.decompressLibrary(response);
        } else {
          console.error("[ IFLLoader ]: Couldn't load [ " + url + " ] [ " + this.xhr.status + " ]");
        }
      }
    };

    IFLLoader.prototype.decompressLibrary = function(data) {
      this.t = new Date().getTime();
      this.loadingPhase++;
      return this.worker.postMessage({
        type: "inflate",
        data: data,
        callback: "parseLibrary"
      });
    };

    IFLLoader.prototype.parseLibrary = function(data) {
      if (data.length === 0) {
        throw "Error Decompressing Library, lenght is 0";
      }
      console.log(("[" + this.url + "] decompression time: ") + (new Date().getTime() - this.t) / 1000);
      this.loadingPhase++;
      this.t = new Date().getTime();
      return this.worker.postMessage({
        type: "convert_library",
        data: data,
        callback: "onLibraryParsed"
      });
    };

    IFLLoader.prototype.onLibraryParsed = function(data) {
      var content, func, _i, _len, _ref;
      this.library = data;
      for (func in this.IFLLibraryFuncs) {
        this.library[func] = this.IFLLibraryFuncs[func];
      }
      this.library._contentByID = {};
      _ref = this.library._content;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        content = _ref[_i];
        this.library._contentByID[content._reference.id] = content;
      }
      console.log(("[" + this.url + "] library parse time: ") + (new Date().getTime() - this.t) / 1000);
      this.t = new Date().getTime();
      this.loadingPhase++;
      return this.convertTextures();
    };

    IFLLoader.prototype.convertTextures = function() {
      var bmp, i, _i, _ref, _ref1;
      for (i = _i = _ref = this.convertTextureIndex, _ref1 = this.library._content.length; _i < _ref1; i = _i += 1) {
        if (this.library._content[i].iflType === "IFLBitmap") {
          bmp = this.library._content[i];
          this.convertTextureIndex = i + 1;
          if (bmp._hasOriginalByteArray) {
            this.worker.postMessage({
              type: "parse_jpg",
              image: bmp._savedBytes,
              w: bmp._width,
              h: bmp._height,
              callback: "onTextureConverted"
            });
          } else {
            this.worker.postMessage({
              type: "convert_argb",
              image: bmp._savedBytes,
              w: bmp._width,
              h: bmp._height,
              callback: "onTextureConverted"
            });
          }
          return;
        }
        this.handleProgress(i, this.library._content.length);
      }
      return this.createModel();
    };

    IFLLoader.prototype.onTextureConverted = function(data) {
      this.library._content[this.convertTextureIndex - 1].converted = data;
      return this.convertTextures();
    };

    IFLLoader.prototype.createModel = function() {
      var root, rootObject, rootObjects, _i, _len;
      console.log(("[" + this.url + "] convert textures time: ") + (new Date().getTime() - this.t) / 1000);
      this.t = new Date().getTime();
      root = new THREE.Object3D();
      rootObjects = this.library.getRootNodes();
      for (_i = 0, _len = rootObjects.length; _i < _len; _i++) {
        rootObject = rootObjects[_i];
        root.add(this.convertNode(rootObject));
      }
      console.log(("[" + this.url + "] convert node time: ") + (new Date().getTime() - this.t) / 1000);
      this.callback(root);
      this.worker.postMessage({
        type: "kill"
      });
    };

    IFLLoader.prototype.convertNode = function(iflnode) {
      var child, childID, mat, retEntity, _i, _len, _ref;
      switch (iflnode.iflType) {
        case "IFLMesh":
          retEntity = this.convertMesh(iflnode);
          break;
        default:
          retEntity = new THREE.Object3D();
      }
      retEntity.name = iflnode._reference.id;
      retEntity.matrix = this.convertMatrix4(iflnode._transformMatrix);
      retEntity.scale.getScaleFromMatrix(retEntity.matrix);
      mat = new THREE.Matrix4().extractRotation(retEntity.matrix);
      retEntity.rotation.setEulerFromRotationMatrix(retEntity.matrix, retEntity.eulerOrder);
      retEntity.position.getPositionFromMatrix(retEntity.matrix);
      _ref = iflnode.childIDs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        childID = _ref[_i];
        child = this.library.getContent(childID.id);
        if (child) {
          retEntity.add(this.convertNode(child));
        }
      }
      return retEntity;
    };

    IFLLoader.prototype.convertMatrix4 = function(m) {
      return new THREE.Matrix4(m[0], m[4], m[8], m[12], m[1], m[5], m[9], m[13], m[2], m[6], m[10], m[14], m[3], m[7], m[11], m[15]);
    };

    IFLLoader.prototype.convertMesh = function(iflmesh) {
      var bone, color_length, colors, geometry, index, isSkinnedMesh, material, normals, positions, ret, skinIndices, skinWeights, tangents, uvs, _i, _len, _ref;
      positions = iflmesh.verticesDecomposed._data[this.IFLVertexAttribute.POSITION];
      uvs = iflmesh.verticesDecomposed._data[this.IFLVertexAttribute.UV];
      normals = iflmesh.verticesDecomposed._data[this.IFLVertexAttribute.NORMALS];
      tangents = iflmesh.verticesDecomposed._data[this.IFLVertexAttribute.TEX_TANGENTS];
      colors = iflmesh.verticesDecomposed._data[this.IFLVertexAttribute.COLOR];
      color_length = 0;
      if (colors != null) {
        color_length = iflmesh.verticesDecomposed._vertexAttributeLengths[this.IFLVertexAttribute.COLOR];
      }
      skinWeights = iflmesh.verticesDecomposed._data[this.IFLVertexAttribute.JOINT_WEIGHTS];
      skinIndices = iflmesh.verticesDecomposed._data[this.IFLVertexAttribute.JOINT_INDICES];
      isSkinnedMesh = skinWeights && skinIndices;
      if (positions.length < 65535 && !isSkinnedMesh && iflmesh.subMeshes.length === 1 && colors === null) {
        geometry = this.convertBufferGeometry(iflmesh, positions, uvs, normals, tangents, colors, color_length, isSkinnedMesh, skinWeights, skinIndices);
      } else {
        geometry = this.convertGeometry(iflmesh, positions, uvs, normals, tangents, colors, color_length, isSkinnedMesh, skinWeights, skinIndices);
      }
      geometry.hasTangents = tangents != null;
      material = iflmesh.subMeshes.length === 1 ? geometry.materials[0] : new THREE.MeshFaceMaterial;
      material.skinning = isSkinnedMesh;
      if (isSkinnedMesh) {
        ret = new THREE.SkinnedMesh(geometry, material);
      } else {
        ret = new THREE.Mesh(geometry, material);
      }
      if (isSkinnedMesh) {
        _ref = ret.geometry.bones;
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          bone = _ref[index];
          ret.boneInverses[index] = bone.invBindMatrix;
        }
      }
      ret.castShadow = ret.receiveShadow = true;
      return ret;
    };

    IFLLoader.prototype.convertBufferGeometry = function(iflmesh, positions, uvs, normals, tangents, colors, color_length, isSkinnedMesh, skinWeights, skinIndices) {
      var geometry, indexBuffer;
      geometry = new THREE.BufferGeometry;
      indexBuffer = iflmesh.subMeshes[0].indexBuffer._rawData;
      geometry.attributes = {};
      geometry.attributes.index = {
        itemSize: 1,
        array: new Int16Array(indexBuffer.length),
        numItems: indexBuffer.length
      };
      geometry.attributes.index.array.set(indexBuffer);
      geometry.attributes.position = {
        itemSize: 3,
        array: positions,
        numItems: positions.length
      };
      if (uvs) {
        geometry.attributes.uv = {
          itemSize: 2,
          array: uvs,
          numItems: uvs.length
        };
      }
      if (normals) {
        geometry.attributes.normal = {
          itemSize: 3,
          array: normals,
          numItems: normals.length
        };
      }
      if (tangents) {
        geometry.attributes.tangent = {
          itemSize: 3,
          array: tangents,
          numItems: tangents.length
        };
      }
      geometry.offsets = [
        {
          start: 0,
          count: indexBuffer.length,
          index: 0
        }
      ];
      geometry.materials = [this.convertMaterial(iflmesh.subMeshes[0], iflmesh._reference.id)];
      return geometry;
    };

    IFLLoader.prototype.convertGeometry = function(iflmesh, positions, uvs, normals, tangents, colors, color_length, isSkinnedMesh, skinWeights, skinIndices) {
      var cachedColors, cachedNormals, cachedTangents, cachedUVs, face, faceIndex, fakeUV, fvUVs, geometry, i, i1, i12, i13, i14, i2, i22, i23, i24, i3, i32, i33, i34, ib, ibi, material, second, stepSize, subMesh, subMeshIndex, _i, _j, _k, _l, _len, _len1, _ref, _ref1, _ref2, _step;
      console.info("Mesh " + iflmesh._reference.id + " converted as standard THREE.Geometry");
      geometry = new THREE.Geometry;
      cachedUVs = [];
      cachedNormals = [];
      cachedTangents = [];
      cachedColors = [];
      if (positions) {
        for (i = _i = 0, _ref = positions.length; _i < _ref; i = _i += 3) {
          geometry.vertices.push(new THREE.Vector3(positions[i], positions[i + 1], positions[i + 2]));
        }
      } else {
        return new THREE.Object3D();
      }
      if (isSkinnedMesh) {
        stepSize = iflmesh.verticesDecomposed._vertexAttributeLengths[this.IFLVertexAttribute.JOINT_INDICES];
        if (stepSize <= 2) {
          for (i = _j = 0, _ref1 = skinIndices.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = _j += stepSize) {
            second = Math.floor(i + stepSize / 2);
            geometry.skinWeights.push(new THREE.Vector4(skinWeights[i], skinWeights[second], 0, 0));
            geometry.skinIndices.push(new THREE.Vector4(skinIndices[i], skinIndices[second], 0, 0));
          }
        }
        geometry.bones = this.convertBones(iflmesh);
        geometry.animation = this.convertAnimations(geometry.bones, iflmesh);
      }
      fakeUV = new THREE.UV(0, 0);
      _ref2 = iflmesh.subMeshes;
      for (subMeshIndex = _k = 0, _len = _ref2.length; _k < _len; subMeshIndex = ++_k) {
        subMesh = _ref2[subMeshIndex];
        material = this.convertMaterial(subMesh, iflmesh._reference.id);
        material.skinning = isSkinnedMesh;
        geometry.materials.push(material);
        ib = subMesh.indexBuffer._rawData;
        for (ibi = _l = 0, _len1 = ib.length, _step = 3; _l < _len1; ibi = _l += _step) {
          i1 = ib[ibi];
          i2 = ib[ibi + 1];
          i3 = ib[ibi + 2];
          i12 = i1 * 2;
          i22 = i2 * 2;
          i32 = i3 * 2;
          i13 = i1 * 3;
          i23 = i2 * 3;
          i33 = i3 * 3;
          i14 = i1 * 4;
          i24 = i2 * 4;
          i34 = i3 * 4;
          face = new THREE.Face3(i1, i2, i3, null, null, subMeshIndex);
          faceIndex = geometry.faces.length;
          fvUVs = geometry.faceVertexUvs[0][faceIndex] = [];
          if (uvs != null) {
            fvUVs.push(cachedUVs[i12] ? cachedUVs[i12] : cachedUVs[i12] = new THREE.UV(uvs[i12], uvs[i12 + 1]));
            fvUVs.push(cachedUVs[i22] ? cachedUVs[i22] : cachedUVs[i22] = new THREE.UV(uvs[i22], uvs[i22 + 1]));
            fvUVs.push(cachedUVs[i32] ? cachedUVs[i32] : cachedUVs[i32] = new THREE.UV(uvs[i32], uvs[i32 + 1]));
          }
          if (normals != null) {
            face.vertexNormals.push(cachedNormals[i13] ? cachedNormals[i13] : cachedNormals[i13] = new THREE.Vector3(normals[i13], normals[i13 + 1], normals[i13 + 2]));
            face.vertexNormals.push(cachedNormals[i23] ? cachedNormals[i23] : cachedNormals[i23] = new THREE.Vector3(normals[i23], normals[i23 + 1], normals[i23 + 2]));
            face.vertexNormals.push(cachedNormals[i33] ? cachedNormals[i33] : cachedNormals[i33] = new THREE.Vector3(normals[i33], normals[i33 + 1], normals[i33 + 2]));
          }
          if (tangents != null) {
            face.vertexTangents.push(cachedTangents[i13] ? cachedTangents[i13] : cachedTangents[i13] = new THREE.Vector4(tangents[i13], tangents[i13 + 1], tangents[i13 + 2], 1));
            face.vertexTangents.push(cachedTangents[i23] ? cachedTangents[i23] : cachedTangents[i23] = new THREE.Vector4(tangents[i23], tangents[i23 + 1], tangents[i23 + 2], 1));
            face.vertexTangents.push(cachedTangents[i33] ? cachedTangents[i33] : cachedTangents[i33] = new THREE.Vector4(tangents[i33], tangents[i33 + 1], tangents[i33 + 2], 1));
          }
          if (colors != null) {
            if (color_length === 3) {
              face.vertexColors.push(cachedColors[i13] ? cachedColors[i13] : cachedColors[i13] = new THREE.Color().setRGB(colors[i13], colors[i13 + 1], colors[i13 + 2]));
              face.vertexColors.push(cachedColors[i23] ? cachedColors[i23] : cachedColors[i23] = new THREE.Color().setRGB(colors[i23], colors[i23 + 1], colors[i23 + 2]));
              face.vertexColors.push(cachedColors[i33] ? cachedColors[i33] : cachedColors[i33] = new THREE.Color().setRGB(colors[i33], colors[i33 + 1], colors[i33 + 2]));
            }
            if (color_length === 4) {
              face.vertexColors.push(cachedColors[i14] ? cachedColors[i14] : cachedColors[i14] = new THREE.Color().setRGB(colors[i14], colors[i14 + 1], colors[i14 + 2]));
              face.vertexColors.push(cachedColors[i24] ? cachedColors[i24] : cachedColors[i24] = new THREE.Color().setRGB(colors[i24], colors[i24 + 1], colors[i24 + 2]));
              face.vertexColors.push(cachedColors[i34] ? cachedColors[i34] : cachedColors[i34] = new THREE.Color().setRGB(colors[i34], colors[i34 + 1], colors[i34 + 2]));
            }
          }
          geometry.faces.push(face);
        }
      }
      if (isSkinnedMesh) {
        geometry.computeCentroids();
        geometry.computeFaceNormals();
        try {
          geometry.computeTangents();
        } catch (e) {
          console.warn("error computing tangents");
        }
      }
      return geometry;
    };

    IFLLoader.prototype.convertBones = function(iflmesh) {
      var bind, bindingToJoint, bindings, bindpose, decomp, i, iflparent, invBindMatrix, jo, joint, jointMatrix, jointToBinding, jointToIndex, joints, p, parent, pos, root, rotq, scale, sk, skeletonJoint, _i, _j, _k, _l, _len, _m, _ref, _ref1, _ref2, _ref3;
      joints = [];
      jointToBinding = [];
      bindingToJoint = [];
      bindings = iflmesh.jointBindings;
      for (i = _i = 0, _ref = bindings.length; _i < _ref; i = _i += 1) {
        jo = this.library.getContent(bindings[i].jointID.id);
        if (!(jo != null)) {
          return null;
        }
        jointToBinding[jo._reference.id] = i;
        bindingToJoint[i] = jo._reference.id;
        joints.push(jo);
      }
      for (_j = 0, _len = joints.length; _j < _len; _j++) {
        joint = joints[_j];
        if (!this.library.findJointParent(joint)) {
          root = joint;
          break;
        }
      }
      bindpose = this.convertMatrix4(iflmesh.bindPoseMatrix);
      sk = [];
      sk.name = root.id;
      jointToIndex = [];
      skeletonJoint;

      for (i = _k = 0, _ref1 = bindings.length; _k < _ref1; i = _k += 1) {
        skeletonJoint = {};
        skeletonJoint.name = joints[i]._reference.id;
        jointMatrix = this.convertMatrix4(joints[i]._transformMatrix);
        invBindMatrix = this.convertMatrix4(bindings[i].inverseBindMatrix);
        decomp = jointMatrix.decompose();
        skeletonJoint.pos = [decomp[0].x, decomp[0].y, decomp[0].z];
        skeletonJoint.rotq = [decomp[1].x, decomp[1].y, decomp[1].z, decomp[1].w];
        jointToIndex[skeletonJoint.name] = sk.length;
        skeletonJoint.invBindMatrix = invBindMatrix;
        skeletonJoint.jointMatrix = jointMatrix;
        sk.push(skeletonJoint);
      }
      for (i = _l = 0, _ref2 = bindings.length; _l < _ref2; i = _l += 1) {
        skeletonJoint = sk[i];
        parent = this.library.findJointParent(joints[i]);
        if (!(parent != null)) {
          skeletonJoint.parent = -1;
        } else {
          if (parent.iflType === "IFLJoint") {
            if (jointToIndex[parent._reference.id] !== void 0) {
              skeletonJoint.parent = jointToIndex[parent._reference.id];
            } else {
              skeletonJoint.parent = -1;
            }
          } else {
            skeletonJoint.parent = -1;
          }
        }
      }
      for (i = _m = 0, _ref3 = bindings.length; _m < _ref3; i = _m += 1) {
        skeletonJoint = sk[i];
        bind = skeletonJoint.invBindMatrix.clone();
        scale = this.setScale1(bind);
        bind.getInverse(bind);
        if (i !== 0) {
          p = sk[skeletonJoint.parent];
          bind.multiply(p.invBindMatrix, bind);
          iflparent = this.library.findParent(this.library.getContent(skeletonJoint.name));
          if (iflparent.iflType !== "IFLJoint") {
            this.prependNonJointParents(bind, iflparent);
          }
        } else {
          bind.multiply(bindpose, bind);
        }
        decomp = bind.decompose();
        pos = [decomp[0].x, decomp[0].y, decomp[0].z];
        rotq = [decomp[1].x, decomp[1].y, decomp[1].z, decomp[1].w];
        skeletonJoint.pos = pos;
        skeletonJoint.rotq = rotq;
      }
      return sk;
    };

    IFLLoader.prototype.prependNonJointParents = function(bind, iflparent) {
      var otherparent, parentmat, prepended;
      parentmat = this.convertMatrix4(iflparent._transformMatrix);
      prepended = new THREE.Matrix4().multiply(parentmat, bind);
      bind.copy(prepended);
      otherparent = this.library.findParent(iflparent);
      if (otherparent.iflType !== "IFLJoint") {
        return this.prependNonJointParents(bind, otherparent);
      }
    };

    IFLLoader.prototype.setScale1 = function(m) {
      var x, y, z;
      x = new THREE.Vector3(m.elements[0], m.elements[1], m.elements[2]).length();
      y = new THREE.Vector3(m.elements[4], m.elements[5], m.elements[6]).length();
      z = new THREE.Vector3(m.elements[8], m.elements[9], m.elements[10]).length();
      m.elements[0] /= x;
      m.elements[1] /= x;
      m.elements[2] /= x;
      m.elements[4] /= y;
      m.elements[5] /= y;
      m.elements[6] /= y;
      m.elements[8] /= z;
      m.elements[9] /= z;
      m.elements[10] /= z;
      m.elements[12] /= x;
      m.elements[13] /= y;
      m.elements[14] /= z;
      m.elements[15] = 1;
      return new THREE.Vector3(x, y, z);
    };

    IFLLoader.prototype.findJointParent = function(joint, root) {
      var childID, p, _i, _len, _ref;
      if (!(root != null)) {
        return null;
      }
      _ref = root.childIDs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        childID = _ref[_i];
        if (childID.id === joint._reference.id) {
          return root;
        } else {
          p = findJointParent(joint, this.library.getContent(childID.id));
          if (p) {
            return p;
          }
        }
      }
      return null;
    };

    IFLLoader.prototype.convertAnimations = function(skeleton, iflMesh) {
      var anim, anim3js, anims, bindpose, firstKey, i, j, k, key3js, keys, lastkey, maxTime, numTimes, r, sampler, stillMatDec, stillPos, stillRot, timePerFrame, totalMaxTime, track, track3js, trackLength, _i, _j, _k, _l, _m, _ref, _ref1, _ref2, _ref3;
      anims = this.library.getAnimationsForSkinJoints(iflMesh);
      r = [];
      bindpose = this.convertMatrix4(iflMesh.bindPoseMatrix);
      if (anims.length === 0) {
        anims[0] = {
          _reference: {
            id: "fake"
          },
          tracks: []
        };
      }
      for (i = _i = 0; _i < 1; i = _i += 1) {
        anim3js = {};
        anim3js.name = iflMesh._reference.id + "_" + anims[i]._reference.id;
        anim3js.fps = 30;
        anim3js.hierarchy = [];
        totalMaxTime = 0;
        for (k = _j = 0, _ref = skeleton.length; _j < _ref; k = _j += 1) {
          track = this.getTrackForJoint(skeleton[k], anims[i]);
          stillMatDec = skeleton[k].jointMatrix.decompose();
          maxTime = 0;
          stillPos = skeleton[k].pos;
          stillRot = skeleton[k].rotq;
          if (track != null) {
            track3js = {};
            track3js.parent = skeleton[k].parent;
            track3js.name = "track_" + skeleton[k].name;
            track3js.keys = [];
            sampler = track.sampler;
            trackLength = track.end - track.start;
            numTimes = sampler.times.length;
            timePerFrame = (trackLength / numTimes) * 1000;
            for (j = _k = 0, _ref1 = sampler.times.length; _k < _ref1; j = _k += 1) {
              key3js = {};
              key3js.time = sampler.times[j];
              maxTime = Math.max(key3js.time, maxTime);
              totalMaxTime = Math.max(maxTime, totalMaxTime);
              key3js.pos = [sampler.positions[j].x, sampler.positions[j].y, sampler.positions[j].z];
              key3js.rot = [sampler.orientations[j].x, sampler.orientations[j].y, sampler.orientations[j].z, sampler.orientations[j].w];
              key3js.scl = [1, 1, 1];
              track3js.keys.push(key3js);
            }
          } else {
            console.log("no track for joint " + skeleton[k].name + " creating a fake one");
            anim = anims[i];
            sampler = anim.tracks.length > 0 ? anim.tracks[0].sampler : {
              times: [0, 1]
            };
            track3js = {};
            track3js.name = "fake_track_" + skeleton[k].name;
            track3js.parent = skeleton[k].parent;
            track3js.keys = [];
            for (j = _l = 0, _ref2 = sampler.times.length; _l < _ref2; j = _l += 1) {
              key3js = {};
              key3js.time = sampler.times[j];
              maxTime = Math.max(key3js.time, maxTime);
              totalMaxTime = Math.max(maxTime, totalMaxTime);
              key3js.pos = [stillPos[0], stillPos[1], stillPos[2]];
              key3js.rot = [stillRot[0], stillRot[1], stillRot[2], stillRot[3]];
              key3js.scl = [1, 1, 1];
              track3js.keys.push(key3js);
            }
          }
          anim3js.length = maxTime;
          anim3js.hierarchy.push(track3js);
        }
        for (k = _m = 0, _ref3 = anim3js.hierarchy.length; _m < _ref3; k = _m += 1) {
          keys = anim3js.hierarchy[k].keys;
          lastkey = keys[keys.length - 1];
          firstKey = keys[0];
          if (lastkey.time < totalMaxTime) {
            keys.push({
              time: totalMaxTime,
              pos: lastkey.pos,
              rot: lastkey.rot,
              scl: lastkey.scl
            });
          }
          if (firstKey.time > 0) {
            keys.unshift({
              time: 0,
              pos: firstKey.pos,
              rot: firstKey.rot,
              scl: firstKey.scl
            });
          }
        }
        anim3js.length = totalMaxTime;
        r.push(anim3js);
      }
      return r[0];
    };

    IFLLoader.prototype.getTrackForJoint = function(joint, anim) {
      var i, _i, _ref;
      for (i = _i = 0, _ref = anim.tracks.length; _i < _ref; i = _i += 1) {
        if (anim.tracks[i].target.id === joint.name) {
          return anim.tracks[i];
        }
      }
      return null;
    };

    IFLLoader.prototype.convertMaterial = function(subMesh, meshname) {
      var matid;
      matid = subMesh.material._reference.id;
      if (meshname.indexOf("terrain") !== -1) {
        this.matCache[matid] = this.convertTerrainMaterial(subMesh);
      } else if (meshname.indexOf("mountains") !== -1) {
        this.matCache[matid] = this.convertMountainsMaterial(subMesh);
      } else {
        this.matCache[matid] = this.convertFresnelMaterial(subMesh);
      }
      return this.matCache[matid];
    };

    IFLLoader.prototype.getMaterialParams = function(subMesh) {
      var params;
      params = {
        color: 0xFFFFFF,
        ambient: 0xFFFFFF,
        specular: 0xFFFFFF,
        map: this.getTexture("roundtent_diff.png"),
        normalMap: this.getTexture("roundtent_nrml.jpg"),
        envMap: this.sky,
        specularMap: this.getTexture("roundtent_spec.jpg"),
        lightMap: null,
        bumpMap: null,
        reflectivity: 0,
        shininess: 30,
        opacity: 1,
        wireframe: false,
        side: THREE.DoubleSide,
        depthWrite: true,
        transparent: false,
        lights: false,
        combine: false
      };
      return params;
    };

    IFLLoader.prototype.convertGenericMaterial = function(subMesh) {
      var mat, params;
      params = this.getMaterialParams(subMesh);
      mat = new THREE.MeshLambertMaterial(params);
      mat.transparent = params.map.transparent;
      return mat;
    };

    IFLLoader.prototype.convertMountainsMaterial = function(subMesh) {
      var params;
      params = {
        map: this.getTexture("mountains.jpg2"),
        fog: false
      };
      return new THREE.MeshBasicMaterial(params);
    };

    IFLLoader.prototype.convertFresnelMaterial = function(subMesh) {
      var material, params, shader, uniforms;
      shader = new IFLPhongFresnelShader;
      uniforms = shader.uniforms;
      params = this.getMaterialParams(subMesh);
      params.fragmentShader = shader.fragmentShader;
      params.vertexShader = shader.vertexShader;
      params.uniforms = uniforms;
      params.map.flipY = false;
      uniforms["diffuse"].value = new THREE.Color(params.color);
      uniforms["ambient"].value = new THREE.Color(params.ambient);
      uniforms["specular"].value = new THREE.Color(params.specular);
      uniforms["shininess"].value = params.shininess;
      uniforms["reflectivity"].value = params.reflectivity;
      uniforms["map"].value = params.map;
      uniforms["envMap"].value = params.envMap;
      uniforms["normalMap"].value = params.normalMap;
      uniforms["specularMap"].value = params.specularMap;
      uniforms["bumpMap"].value = params.bumpMap;
      uniforms["tAux"].value = this.getTexture("roundtent_aux.jpg");
      material = new THREE.ShaderMaterial(params);
      material.reflectivity = params.reflectivity;
      material.shininess = params.shininess;
      material.map = params.map;
      material.envMap = params.envMap;
      material.normalMap = params.normalMap;
      material.specularMap = params.specularMap;
      material.bumpMap = params.bumpMap;
      material.lights = false;
      material.alphaTest = 0.7;
      material.fog = true;
      return material;
    };

    IFLLoader.prototype.convertTerrainMaterial = function(subMesh) {
      var blendMap, difftex, difftexB, difftexG, difftexR, lightex, material, parameters, shader, uniforms;
      shader = new IFLTerrainLambertShader;
      uniforms = THREE.UniformsUtils.clone(shader.uniforms);
      uniforms["ambient"].value = new THREE.Color(0xFFFFFF);
      uniforms["diffuse"].value = new THREE.Color(0xFFFFFF);
      blendMap = this.getTexture("terrain_blend.jpg3");
      difftex = this.getTexture("terrain_base.jpg3");
      lightex = this.getTexture("terrain_lightmap.jpg3");
      difftexR = this.getTexture("terrain_diffuseR.jpg3");
      difftexG = this.getTexture("terrain_diffuseG.jpg3");
      difftexB = this.getTexture("terrain_diffuseB.jpg3");
      difftex.wrapS = difftex.wrapT = THREE.RepeatWrapping;
      difftexR.wrapS = difftexR.wrapT = THREE.RepeatWrapping;
      difftexG.wrapS = difftexG.wrapT = THREE.RepeatWrapping;
      difftexB.wrapS = difftexB.wrapT = THREE.RepeatWrapping;
      uniforms["map"].value = difftex;
      uniforms["lightMap"].value = lightex;
      uniforms["tBlendmap"].value = blendMap;
      uniforms["enableDiffuseR"].value = true;
      uniforms["enableDiffuseG"].value = true;
      uniforms["enableDiffuseB"].value = true;
      uniforms["tDiffuseR"].value = difftexR;
      uniforms["tDiffuseG"].value = difftexG;
      uniforms["tDiffuseB"].value = difftexB;
      uniforms["offsetRepeat"].value = new THREE.Vector4(0, 0, 10, 10);
      uniforms["offsetRepeatR"].value = new THREE.Vector4(0, 0, 10, 10);
      uniforms["offsetRepeatG"].value = new THREE.Vector4(0, 0, 10, 10);
      uniforms["offsetRepeatB"].value = new THREE.Vector4(0, 0, 10, 10);
      parameters = {
        fragmentShader: shader.fragmentShader,
        vertexShader: shader.vertexShader,
        uniforms: uniforms,
        lights: true
      };
      material = new THREE.ShaderMaterial(parameters);
      material.map = difftex;
      material.lightMap = lightex;
      material.fog = true;
      return material;
    };

    IFLLoader.prototype.getSubmeshTexture = function(from) {
      if (from.length > 0) {
        return this.getTexture(from[0].id, false);
      }
      return null;
    };

    IFLLoader.prototype.getTexture = function(id) {
      var ret, tex;
      tex = this.library.getContent(id);
      if ((tex != null ? tex.converted : void 0) != null) {
        this.texCache[tex._reference.id] = ret = new THREE.DataTexture(tex.converted, tex._width, tex._height, tex._hasOriginalByteArray ? THREE.RGBFormat : THREE.RGBAFormat);
      }
      if (ret) {
        ret.needsUpdate = true;
        ret.flipY = false;
        ret.transparent = tex.transparent;
      }
      return ret;
    };

    IFLLoader.prototype.getCubeTexture = function(array) {
      var image, images, index, path, tex, texture, _i, _len;
      images = [];
      texture = new THREE.Texture();
      texture.image = images;
      texture.flipY = false;
      for (index = _i = 0, _len = array.length; _i < _len; index = ++_i) {
        path = array[index];
        tex = this.getTexture(path);
        image = tex.image;
        image.format = tex.format;
        images[index] = image;
      }
      texture.needsUpdate = true;
      return texture;
    };

    IFLLoader.prototype.IFLLibraryFuncs = {
      getContent: function(id) {
        return this._contentByID[id];
      },
      getRootNodes: function() {
        return this.getRootNodesIn(this._content);
      },
      isIFLNode: function(object) {
        return object.iflType === "IFLNode" || object.iflType === "IFLJoint" || object.iflType === "IFLMesh" || object.iflType === "IFLMeshContainer" || object.iflType === "IFLLight" || object.iflType === "IFLCamera";
      },
      getDiffuseTexture: function(subMesh) {
        return this.getContent(subMesh._diffuseTextures[0].id);
      },
      getRootNodesIn: function(lib) {
        var k, m, meshesChildrenOfSomeone, meshesNotChildrenOfSomeone, tm, _i, _j, _len, _len1, _ref;
        meshesChildrenOfSomeone = [];
        meshesNotChildrenOfSomeone = [];
        for (_i = 0, _len = lib.length; _i < _len; _i++) {
          tm = lib[_i];
          if (!(this.isIFLNode(tm))) {
            continue;
          }
          if (meshesChildrenOfSomeone.indexOf(tm._reference.id) === -1) {
            meshesNotChildrenOfSomeone.push(tm._reference.id);
          }
          _ref = tm.childIDs;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            m = _ref[_j];
            if (meshesNotChildrenOfSomeone.indexOf(m.id) !== -1) {
              meshesNotChildrenOfSomeone.splice(meshesNotChildrenOfSomeone.indexOf(m.id), 1);
            }
            meshesChildrenOfSomeone.push(m.id);
          }
        }
        return (function() {
          var _k, _ref1, _results;
          _results = [];
          for (k = _k = 0, _ref1 = meshesNotChildrenOfSomeone.length; _k < _ref1; k = _k += 1) {
            _results.push(this.getContent(meshesNotChildrenOfSomeone[k]));
          }
          return _results;
        }).call(this);
      },
      isRoot: function(contentID) {
        return this.isRootWithin(contentID, this._content);
      },
      isRootWithin: function(contentID, context) {
        var childID, content, _i, _j, _len, _len1, _ref;
        for (_i = 0, _len = context.length; _i < _len; _i++) {
          content = context[_i];
          if (this.isIFLNode(content)) {
            _ref = content.childIDs;
            for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
              childID = _ref[_j];
              if (childID.id === contentID) {
                return false;
              }
            }
          }
        }
        return true;
      },
      findParent: function(node, parent) {
        var ch, childID, p, rootNode, rootNodes, _i, _j, _len, _len1, _ref;
        if (!(parent != null)) {
          rootNodes = this.getRootNodes();
          for (_i = 0, _len = rootNodes.length; _i < _len; _i++) {
            rootNode = rootNodes[_i];
            p = this.findParent(node, rootNode);
            if (p != null) {
              return p;
            }
          }
        } else {
          _ref = parent.childIDs;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            childID = _ref[_j];
            if (childID.id === node._reference.id) {
              return parent;
            } else {
              ch = this.getContent(childID.id);
              if (ch) {
                p = this.findParent(node, ch);
                if (p != null) {
                  return p;
                }
              }
            }
          }
        }
        return null;
      },
      getAnimationsForSkinJoints: function(skin) {
        var animRet, doneAnims, jobj, joint, jointAnimation, jointAnimations, r, track, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
        r = [];
        doneAnims = [];
        _ref = skin.jointBindings;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          jobj = _ref[_i];
          joint = jobj.jointID;
          jointAnimations = this.getAnimationsForID(joint.id, false);
          if ((jointAnimations != null)) {
            for (_j = 0, _len1 = jointAnimations.length; _j < _len1; _j++) {
              jointAnimation = jointAnimations[_j];
              if (!doneAnims[jointAnimation._reference.id]) {
                doneAnims[jointAnimation._reference.id] = {
                  tracks: [],
                  iflType: "IFLAnimation"
                };
                doneAnims[jointAnimation._reference.id]._reference = {
                  id: jointAnimation._reference.id,
                  iflType: "IFLID"
                };
                r.push(doneAnims[jointAnimation._reference.id]);
              }
              animRet = doneAnims[jointAnimation._reference.id];
              _ref1 = jointAnimation.tracks;
              for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
                track = _ref1[_k];
                if (animRet.tracks.indexOf(track) === -1) {
                  animRet.tracks.push(track);
                }
              }
            }
          }
        }
        return r;
      },
      getAnimationsForID: function(id) {
        var animation, r, track, tracks, _i, _j, _len, _len1, _ref;
        r = [];
        _ref = this._content;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          animation = _ref[_i];
          if (!(animation.iflType === "IFLAnimation")) {
            continue;
          }
          tracks = animation.tracks;
          for (_j = 0, _len1 = tracks.length; _j < _len1; _j++) {
            track = tracks[_j];
            if (track.target.id === id && r.indexOf(animation) === -1) {
              r.push(animation);
            }
          }
        }
        if (r.length > 0) {
          return r;
        }
        return null;
      },
      findJointParent: function(node) {
        var childID, content, _i, _j, _len, _len1, _ref, _ref1;
        _ref = this._content;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          content = _ref[_i];
          if (this.isIFLNode(content)) {
            _ref1 = content.childIDs;
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              childID = _ref1[_j];
              if (childID.id === node._reference.id) {
                if (content.iflType === "IFLJoint") {
                  return content;
                } else {
                  return this.findJointParent(content);
                }
              }
            }
          }
        }
        return null;
      }
    };

    return IFLLoader;

  })();

  BatchLoadModel = (function(_super) {

    __extends(BatchLoadModel, _super);

    function BatchLoadModel() {
      return BatchLoadModel.__super__.constructor.apply(this, arguments);
    }

    BatchLoadModel.prototype.defaults = {
      id: null,
      list: null
    };

    return BatchLoadModel;

  })(Backbone.Model);

  LocaleModel = (function(_super) {

    __extends(LocaleModel, _super);

    function LocaleModel() {
      return LocaleModel.__super__.constructor.apply(this, arguments);
    }

    LocaleModel.prototype.defaults = {
      lang: null,
      strings: null
    };

    return LocaleModel;

  })(Backbone.Model);

  SpriteSheetModel = (function(_super) {

    __extends(SpriteSheetModel, _super);

    function SpriteSheetModel() {
      return SpriteSheetModel.__super__.constructor.apply(this, arguments);
    }

    SpriteSheetModel.prototype.defaults = {
      frames: null,
      animations: null,
      images: null
    };

    SpriteSheetModel.prototype.id = null;

    return SpriteSheetModel;

  })(Backbone.Model);

  TemplateModel = (function(_super) {

    __extends(TemplateModel, _super);

    function TemplateModel() {
      return TemplateModel.__super__.constructor.apply(this, arguments);
    }

    TemplateModel.prototype.defaults = {
      id: "",
      text: ""
    };

    return TemplateModel;

  })(Backbone.Model);

  CollectionBatchLoad = (function(_super) {

    __extends(CollectionBatchLoad, _super);

    function CollectionBatchLoad() {
      return CollectionBatchLoad.__super__.constructor.apply(this, arguments);
    }

    CollectionBatchLoad.prototype.model = BatchLoadModel;

    return CollectionBatchLoad;

  })(Backbone.Collection);

  CollectionLocale = (function(_super) {

    __extends(CollectionLocale, _super);

    function CollectionLocale() {
      return CollectionLocale.__super__.constructor.apply(this, arguments);
    }

    CollectionLocale.prototype.model = LocaleModel;

    return CollectionLocale;

  })(Backbone.Collection);

  CollectionSpriteSheets = (function(_super) {

    __extends(CollectionSpriteSheets, _super);

    function CollectionSpriteSheets() {
      this.get = __bind(this.get, this);
      return CollectionSpriteSheets.__super__.constructor.apply(this, arguments);
    }

    CollectionSpriteSheets.prototype.model = SpriteSheetModel;

    CollectionSpriteSheets.prototype.add = function(models, options) {
      var m;
      m = JSON.parse(models.result);
      m.id = models.id;
      return CollectionSpriteSheets.__super__.add.call(this, m, options);
    };

    CollectionSpriteSheets.prototype.get = function(from, id) {
      var model, ss;
      model = (this.where({
        id: from
      }))[0];
      ss = {};
      ss.image = window.oz.baseAssets.get(model.id + "Assets").src;
      ss.frame = model.get('animations')[id].frames[0];
      ss.coord = model.get('frames')[ss.frame];
      ss.x = ss.coord[0];
      ss.y = ss.coord[1];
      ss.width = ss.coord[2];
      ss.height = ss.coord[3];
      return ss;
    };

    return CollectionSpriteSheets;

  })(Backbone.Collection);

  CollectionTemplates = (function(_super) {

    __extends(CollectionTemplates, _super);

    function CollectionTemplates() {
      return CollectionTemplates.__super__.constructor.apply(this, arguments);
    }

    CollectionTemplates.prototype.model = TemplateModel;

    return CollectionTemplates;

  })(Backbone.Collection);

  Router = (function(_super) {

    __extends(Router, _super);

    function Router() {
      return Router.__super__.constructor.apply(this, arguments);
    }

    Router.EVENT_HASH_CHANGED = 'EVENT_HASH_CHANGED';

    Router.prototype.routes = {
      ':area': 'hashChanged',
      ':area/': 'hashChanged',
      '/:area': 'hashChanged',
      '/:area/': 'hashChanged',
      ':area/:sub': 'hashChanged',
      ':area/:sub/': 'hashChanged',
      '/:area/:sub': 'hashChanged',
      '/:area/:sub/': 'hashChanged',
      '*actions': 'hashChanged'
    };

    Router.prototype.start = function() {
      return Backbone.history.start({
        pushState: true,
        root: window.oz.BASE_PATH
      });
    };

    Router.prototype.hashChanged = function(area, sub) {
      this.area = area != null ? area : null;
      this.sub = sub != null ? sub : null;
      return this.trigger(Router.EVENT_HASH_CHANGED, this.area, this.sub);
    };

    Router.prototype.navigateTo = function(where) {
      var full_url, i, _i, _ref;
      full_url = '';
      for (i = _i = 0, _ref = Math.min(arguments.length - 1, 1); 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (arguments[i] != null) {
          full_url += '/' + arguments[i];
        }
      }
      if (full_url.substr(-1) !== "/") {
        full_url += '/';
      }
      return this.navigate(full_url, {
        trigger: true
      });
    };

    return Router;

  })(Backbone.Router);

  AssetLoader = (function() {

    AssetLoader.prototype.preload = null;

    function AssetLoader() {
      this.handleFileError = __bind(this.handleFileError, this);

      this.handleFileLoaded = __bind(this.handleFileLoaded, this);

      this.handleOverallProgress = __bind(this.handleOverallProgress, this);

      this.loadFiles = __bind(this.loadFiles, this);
      _.extend(this, Backbone.Events);
      this.preload = new createjs.PreloadJS;
      this.preload.installPlugin(createjs.SoundJS);
      this.preload.onFileLoad = this.handleFileLoaded;
      this.preload.onError = this.handleFileError;
      this.preload.onProgress = this.handleOverallProgress;
      this.preload.setMaxConnections(5);
      this;

    }

    AssetLoader.prototype.loadFiles = function(manifest) {
      var item;
      while (manifest.length > 0) {
        item = manifest.shift();
        item.src = item.src;
        this.preload.loadFile(item);
      }
      return this;
    };

    AssetLoader.prototype.handleOverallProgress = function(event) {
      this.trigger(PreloaderEvents.PROGRESS, event);
      return this;
    };

    AssetLoader.prototype.handleFileLoaded = function(event) {
      this.trigger(PreloaderEvents.COMPLETE, event);
      return this;
    };

    AssetLoader.prototype.handleFileError = function(event) {
      this.trigger(PreloaderEvents.FAIL, event);
      return this;
    };

    return AssetLoader;

  })();

  PreloaderEvents = (function() {

    function PreloaderEvents() {}

    PreloaderEvents.COMPLETE = "onComplete";

    PreloaderEvents.PROGRESS = "onProgress";

    PreloaderEvents.FAIL = "onFail";

    return PreloaderEvents;

  })();

  AudioManager = (function() {

    function AudioManager() {}

    AudioManager.sounds = [];

    AudioManager.vol = 0;

    AudioManager.from = null;

    AudioManager.to = null;

    AudioManager.add = function(sound) {
      AudioManager.sounds.push(sound);
      return AudioManager;
    };

    AudioManager.play = function(id) {
      AudioManager.fadeSound(1, id);
      return createjs.SoundJS.play(id);
    };

    AudioManager.pause = function(id) {
      return AudioManager.fadeSound(0, id, "pause");
    };

    AudioManager.resume = function(id) {
      AudioManager.fadeSound(1, id);
      return createjs.SoundJS.resume(id);
    };

    AudioManager.stop = function(id) {
      return AudioManager.fadeSound(0, id, "stop");
    };

    AudioManager.volume = function(id, volume) {
      AudioManager.vol = volume;
      return createjs.SoundJS.setVolume(AudioManager.vol, id);
    };

    AudioManager.fadeSound = function(volu, id, action) {
      AudioManager.from = {
        property: AudioManager.vol
      };
      AudioManager.to = {
        property: volu
      };
      return jQuery(AudioManager.from).stop(true, false).animate(AudioManager.to, {
        duration: 1000,
        step: function() {
          return AudioManager.volume(id, AudioManager.from.property);
        },
        complete: function() {
          console.log("complete", action);
          AudioManager.volume(id, AudioManager.to.property);
          if (action === "pause") {
            createjs.SoundJS.pause(id);
          }
          if (action === "stop") {
            return createjs.SoundJS.stop(id);
          } else {
            return createjs.SoundJS.resume(id);
          }
        }
      });
    };

    AudioManager.update = function(camera) {
      var audio, distance, id, _ref, _results;
      _ref = AudioManager.sounds;
      _results = [];
      for (id in _ref) {
        audio = _ref[id];
        distance = AudioManager.sounds[id].data.position.distanceTo(camera.position);
        if (distance <= AudioManager.sounds[id].data.radius) {
          _results.push(AudioManager.volume(id, AudioManager.sounds[id].data.volume * (1 - distance / AudioManager.sounds[id].data.radius)));
        } else {
          _results.push(AudioManager.volume(id, 0));
        }
      }
      return _results;
    };

    return AudioManager;

  }).call(this);

  AudioManagerEvents = (function() {

    function AudioManagerEvents() {}

    AudioManagerEvents.LOAD_COMPLETE = "onComplete";

    AudioManagerEvents.LOAD_PROGRESS = "onProgress";

    AudioManagerEvents.LOAD_FAIL = "onFail";

    return AudioManagerEvents;

  })();

  Requester = (function() {

    function Requester() {}

    Requester.requests = [];

    Requester.request = function(data) {
      var r;
      r = $.ajax({
        url: data.url,
        type: data.type ? data.type : "POST",
        data: data.data ? data.data : null,
        dataType: data.dataType ? data.dataType : "json",
        contentType: data.contentType ? data.contentType : "application/x-www-form-urlencoded; charset=UTF-8",
        processData: data.processData !== null && data.processData !== void 0 ? data.processData : true
      });
      r.done(data.done);
      return r.fail(data.fail);
    };

    Requester.send = function(url, params) {
      var formData, key, value, xhr;
      formData = new FormData;
      for (key in params) {
        value = params[key];
        formData.append(key, value);
      }
      xhr = new XMLHttpRequest;
      xhr.open("POST", url, true);
      xhr.onload = function(e) {
        return console.log(e);
      };
      return xhr.send(formData);
    };

    return Requester;

  }).call(this);

  BaseAssets = (function() {

    BaseAssets.prototype.preloader = null;

    BaseAssets.prototype.loadedAssets = null;

    BaseAssets.prototype.collection = null;

    BaseAssets.prototype.batches = null;

    BaseAssets.prototype.loadedBatches = null;

    BaseAssets.prototype.batchesToLoad = null;

    function BaseAssets() {
      this.onFileComplete = __bind(this.onFileComplete, this);

      this.onFail = __bind(this.onFail, this);

      this.onProgress = __bind(this.onProgress, this);

      this.get = __bind(this.get, this);

      this.onCollectionError = __bind(this.onCollectionError, this);

      this.onCollectionSuccess = __bind(this.onCollectionSuccess, this);

      this.init = __bind(this.init, this);

      this.loadBatch = __bind(this.loadBatch, this);
      _.extend(this, Backbone.Events);
      this;

    }

    BaseAssets.prototype.loadBatch = function(batches) {
      var batch, _i, _len, _ref;
      this.batches = batches;
      this.batchesToLoad = [];
      _ref = this.batches;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        batch = _ref[_i];
        if (this.loadedBatches.toString().indexOf(batch) === -1) {
          this.batchesToLoad.push(batch);
          this.preloader.loadFiles((this.collection.where({
            id: batch
          }))[0].get("list"));
        }
      }
      if (this.batchesToLoad.length === 0) {
        return this.trigger("COMPLETE");
      }
    };

    BaseAssets.prototype.init = function(batches) {
      this.batches = batches;
      this.loadedBatches = [];
      this.batchesToLoad = [];
      this.preloader = new AssetLoader;
      this.preloader.on(PreloaderEvents.COMPLETE, this.onFileComplete);
      this.preloader.on(PreloaderEvents.PROGRESS, this.onProgress);
      this.preloader.on(PreloaderEvents.FAIL, this.onFail);
      this.collection = new CollectionBatchLoad;
      this.collection.url = "js/assetList.json";
      return this.collection.fetch({
        success: this.onCollectionSuccess,
        error: this.onCollectionError
      });
    };

    BaseAssets.prototype.onCollectionSuccess = function(event) {
      return this.loadBatch(this.batches);
    };

    BaseAssets.prototype.onCollectionError = function(event) {
      return console.log(event);
    };

    BaseAssets.prototype.get = function(id) {
      return this.loadedAssets[id];
    };

    BaseAssets.prototype.onProgress = function(event) {
      this.trigger("PROGRESS", event);
      return this;
    };

    BaseAssets.prototype.onFail = function(event) {
      return trace(event);
    };

    BaseAssets.prototype.onFileComplete = function(event) {
      switch (event.type) {
        case 'json':
          if (event.src.indexOf('js/ss/' > -1)) {
            (window || document).oz.ss.add(event);
          }
          break;
        case 'sound':
          AudioManager.add(event);
      }
      if (this.preloader.preload._numItems === this.preloader.preload._numItemsLoaded) {
        this.loadedAssets = event.target._loadedItemsById;
        this.loadedBatches = this.loadedBatches.concat(this.batchesToLoad);
        this.trigger("COMPLETE", this.loadedAssets);
      }
      return this;
    };

    return BaseAssets;

  })();

  Locale = (function() {

    Locale.prototype.CURRENT_LOCALE = null;

    Locale.prototype.locales = null;

    Locale.prototype.collection = null;

    function Locale(locales) {
      this.hasLocale = __bind(this.hasLocale, this);

      this.get = __bind(this.get, this);

      this.set = __bind(this.set, this);

      var l, _i, _len;
      this.locales = [];
      for (_i = 0, _len = locales.length; _i < _len; _i++) {
        l = locales[_i];
        this.locales.push(new LocaleModel(JSON.parse(l.result)));
      }
      this.collection = new CollectionLocale(this.locales);
    }

    Locale.prototype.set = function(locale) {
      return this.CURRENT_LOCALE = locale;
    };

    Locale.prototype.get = function(id) {
      var a, l;
      l = this.collection.where({
        lang: this.CURRENT_LOCALE
      });
      a = l[0].get('strings')[id];
      return a || "";
    };

    Locale.prototype.hasLocale = function(locale) {
      var f, i, _i, _len, _ref;
      f = false;
      _ref = this.locales;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (i.get('lang') === locale) {
          f = true;
          break;
        }
      }
      /* return
      */

      return f;
    };

    return Locale;

  })();

  Share = (function() {

    function Share() {}

    Share.openWin = function(url, w, h) {
      var left, top;
      left = (screen.availWidth - w) >> 1;
      top = (screen.availHeight - h) >> 1;
      return window.open(url, '', 'top=' + top + ',left=' + left + ',width=' + w + ',height=' + h + ',location=no,menubar=no');
    };

    Share.plus = function(url) {
      return Share.openWin("https://plus.google.com/share?url=" + url, 650, 385);
    };

    Share.facebook = function(url) {
      return Share.openWin("http://www.facebook.com/share.php?u=" + url, 600, 300);
    };

    Share.twitter = function(url) {
      var yourTextHere;
      yourTextHere = (window || document).oz.locale.get('twitterShare');
      return Share.openWin("http://twitter.com/intent/tweet/?text=" + yourTextHere + "&url=" + url, 600, 300);
    };

    return Share;

  }).call(this);

  ShortURL = (function() {

    function ShortURL() {
      this.onGetURLError = __bind(this.onGetURLError, this);

      this.getShortnedURL = __bind(this.getShortnedURL, this);

      this.get = __bind(this.get, this);
      _.extend(this, Backbone.Events);
    }

    ShortURL;


    ShortURL.prototype.get = function(url) {
      return $.ajax({
        type: "POST",
        url: "https://www.googleapis.com/urlshortener/v1/url",
        data: JSON.stringify({
          "longUrl": url
        }),
        success: this.getShortnedURL,
        error: this.onGetURLError,
        dataType: 'json',
        contentType: 'application/json'
      });
    };

    ShortURL.prototype.getShortnedURL = function(event) {
      return this.trigger('complete', event.id);
    };

    ShortURL.prototype.onGetURLError = function(event) {
      return console.warn('short url error -> ' + event);
    };

    /*
        HOW TO USE
    
            @oz().shortURL.on 'complete', @shortURLComplete
            @oz().shortURL.get 'http://unit9.com'
    
            shortURLComplete : (event) =>
                @oz().shortURL.off()
    
                console.log event
    */


    return ShortURL;

  })();

  Templates = (function() {

    Templates.prototype.templates = null;

    function Templates(templates) {
      this.get = __bind(this.get, this);

      this.parseXML = __bind(this.parseXML, this);
      _.extend(this, Backbone.Events);
      this.parseXML(templates);
      this;

    }

    Templates.prototype.parseXML = function(data) {
      var temp;
      temp = [];
      $(data).find('template').each(function(key, value) {
        return temp.push(new TemplateModel({
          id: $(value).attr('id').toString(),
          text: $.trim($(value).text())
        }));
      });
      return this.templates = new CollectionTemplates(temp);
    };

    Templates.prototype.get = function(id) {
      var t;
      t = this.templates.where({
        id: id
      });
      t = t[0].get('text');
      return $.trim(t);
    };

    return Templates;

  })();

  Abstract = (function(_super) {

    __extends(Abstract, _super);

    function Abstract() {
      this.oz = __bind(this.oz, this);

      this.onAssetsComplete = __bind(this.onAssetsComplete, this);

      this.onAssetsProgress = __bind(this.onAssetsProgress, this);

      this.onAssetsInitLoading = __bind(this.onAssetsInitLoading, this);

      this.onEnterFrame = __bind(this.onEnterFrame, this);

      this.mouseEnabled = __bind(this.mouseEnabled, this);

      this.show = __bind(this.show, this);

      this.hide = __bind(this.hide, this);

      this.onResize = __bind(this.onResize, this);

      this.remove = __bind(this.remove, this);

      this.addChild = __bind(this.addChild, this);

      this.dispose = __bind(this.dispose, this);

      this.move = __bind(this.move, this);

      this.empty = __bind(this.empty, this);

      this.render = __bind(this.render, this);

      this.pause = __bind(this.pause, this);

      this.resume = __bind(this.resume, this);

      this.update = __bind(this.update, this);

      this.init = __bind(this.init, this);
      return Abstract.__super__.constructor.apply(this, arguments);
    }

    Abstract.prototype.el = null;

    Abstract.prototype.id = null;

    Abstract.prototype.children = null;

    Abstract.prototype.template = null;

    Abstract.prototype.templateVars = null;

    Abstract.prototype.assetsBatch = null;

    Abstract.prototype.paused = true;

    Abstract.prototype.displayMode = '';

    Abstract.prototype.initialize = function() {
      var tmpHTML;
      this.children = [];
      if (this.template) {
        tmpHTML = _.template(this.oz().templates.get(this.template));
        this.setElement(tmpHTML(this.templateVars));
      }
      if (this.id) {
        this.$el.attr('id', this.id);
      }
      if (this.className) {
        this.$el.addClass(this.className);
      }
      this.init();
      if (this.assetsBatch != null) {
        this.onAssetsInitLoading();
        this.oz().baseAssets.on("COMPLETE", this.onAssetsComplete);
        this.oz().baseAssets.on("PROGRESS", this.onAssetsProgress);
        this.oz().baseAssets.loadBatch(this.assetsBatch);
      }
      return this.paused = false;
    };

    Abstract.prototype.init = function() {
      return this;
    };

    Abstract.prototype.update = function() {
      var child, _i, _len, _ref;
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        child.update();
      }
      return this;
    };

    Abstract.prototype.resume = function() {
      var child, _i, _len, _ref;
      this.paused = false;
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if (child.resume != null) {
          child.resume();
        }
        child.$el.resume();
      }
      return this;
    };

    Abstract.prototype.pause = function() {
      var child, _i, _len, _ref;
      this.paused = true;
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if (child.pause != null) {
          child.pause();
        }
        child.$el.pause();
      }
      return this;
    };

    Abstract.prototype.render = function() {
      var child, _i, _len, _ref;
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        child.render();
      }
      return this;
    };

    Abstract.prototype.empty = function() {
      var child, _i, _len, _ref;
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if (child) {
          if (child.dispose) {
            child.dispose();
          }
          if (child.empty != null) {
            child.empty();
          }
          this.remove(child);
        }
      }
      this.children = [];
      this.$el.empty();
      return this;
    };

    Abstract.prototype.move = function(x, y) {
      this.$el.css({
        left: x,
        top: y
      });
      return this;
    };

    Abstract.prototype.dispose = function() {
      var n;
      n = $(this.$el.children()[0]).attr('id') || $(this.$el.children()[0]).attr('class') || this.$el.html();
      alert("don't forget to override dispose -> " + n);
      return this;
    };

    Abstract.prototype.addChild = function(child, prepend) {
      var c;
      if (prepend == null) {
        prepend = false;
      }
      if (child.el) {
        this.children.push(child);
      }
      c = child.el ? child.$el : child;
      if (!prepend) {
        this.$el.append(c);
      } else {
        this.$el.prepend(c);
      }
      return this;
    };

    Abstract.prototype.remove = function(child) {
      var c;
      if (child == null) {
        return;
      }
      c = child.el ? child.$el : $(child);
      if (c) {
        child.dispose();
      }
      if (c) {
        this.children.splice(this.children.indexOf(child, 1));
      }
      return c.remove();
    };

    Abstract.prototype.onResize = function(event) {
      var child, _i, _len, _ref;
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if (child.onResize) {
          child.onResize();
        }
      }
      return this;
    };

    Abstract.prototype.hide = function() {
      this.displayMode = this.$el.css('display');
      return this.$el.css({
        display: 'none'
      });
    };

    Abstract.prototype.show = function() {
      return this.$el.css({
        display: this.displayMode || 'block'
      });
    };

    Abstract.prototype.mouseEnabled = function(enabled) {
      return this.$el.css({
        "pointer-events": enabled ? "auto" : "none"
      });
    };

    Abstract.prototype.onEnterFrame = function() {
      var child, _i, _len, _ref;
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if (!this.paused && child && child.onEnterFrame) {
          child.onEnterFrame();
        }
      }
      return this;
    };

    Abstract.prototype.onAssetsInitLoading = function() {
      return this;
    };

    Abstract.prototype.onAssetsProgress = function() {
      return this;
    };

    Abstract.prototype.onAssetsComplete = function() {
      this.oz().baseAssets.off("COMPLETE", this.onAssetsComplete);
      return this.oz().baseAssets.off("PROGRESS", this.onAssetsProgress);
    };

    Abstract.prototype.oz = function() {
      return (window || document).oz;
    };

    return Abstract;

  })(Backbone.View);

  AbstractButton = (function(_super) {

    __extends(AbstractButton, _super);

    function AbstractButton() {
      this.oz = __bind(this.oz, this);

      this.pause = __bind(this.pause, this);

      this.resume = __bind(this.resume, this);

      this.dispose = __bind(this.dispose, this);

      this.changeLabel = __bind(this.changeLabel, this);

      this.onclick = __bind(this.onclick, this);

      this.onout = __bind(this.onout, this);

      this.onover = __bind(this.onover, this);

      this.disable = __bind(this.disable, this);

      this.enable = __bind(this.enable, this);

      this.init = __bind(this.init, this);
      return AbstractButton.__super__.constructor.apply(this, arguments);
    }

    AbstractButton.prototype.el = null;

    AbstractButton.prototype.id = null;

    AbstractButton.prototype.label = null;

    AbstractButton.prototype.template = null;

    AbstractButton.prototype.templateVars = null;

    AbstractButton.prototype.tagName = "span";

    AbstractButton.prototype.className = "abstractbutton";

    AbstractButton.prototype.classButton = null;

    AbstractButton.prototype.classAnimated = null;

    AbstractButton.prototype.initialize = function() {
      var tmpHTML;
      if (this.template) {
        tmpHTML = _.template(this.oz().templates.get(this.template));
        this.setElement(tmpHTML(this.templateVars));
      }
      if (this.id) {
        this.$el.attr('id', this.id);
      }
      if (this.className) {
        this.$el.addClass(this.className);
      }
      if (this.classAnimated) {
        this.$el.addClass(this.classAnimated);
      }
      if (this.label != null) {
        this.$el.append(this.label);
      }
      return this.init();
    };

    AbstractButton.prototype.init = function() {
      return this;
    };

    AbstractButton.prototype.enable = function() {
      this.$el.css({
        "cursor": "pointer"
      });
      this.$el.removeClass("disabled");
      this.$el.mouseover(this.onover);
      this.$el.mouseout(this.onout);
      return this.$el.click(this.onclick);
    };

    AbstractButton.prototype.disable = function() {
      this.$el.css({
        "cursor": "default"
      });
      this.$el.addClass("disabled");
      this.$el.unbind("mouseover");
      this.$el.unbind("mouseout");
      return this.$el.unbind("click");
    };

    AbstractButton.prototype.onover = function() {
      return this.$el.addClass("over");
    };

    AbstractButton.prototype.onout = function() {
      return this.$el.removeClass("over");
    };

    AbstractButton.prototype.onclick = function() {
      return this;
    };

    AbstractButton.prototype.changeLabel = function(label) {
      return this.$el.html(label);
    };

    AbstractButton.prototype.dispose = function() {
      var n;
      n = $(this.$el.children()[0]).attr('id') || $(this.$el.children()[0]).attr('class') || this.$el.html();
      alert("don't forget to override dispose -> " + n);
      return this;
    };

    AbstractButton.prototype.resume = function() {
      return this;
    };

    AbstractButton.prototype.pause = function() {
      return this;
    };

    AbstractButton.prototype.oz = function() {
      return (window || document).oz;
    };

    return AbstractButton;

  })(Backbone.View);

  AbstractChapter = (function(_super) {

    __extends(AbstractChapter, _super);

    function AbstractChapter() {
      return AbstractChapter.__super__.constructor.apply(this, arguments);
    }

    AbstractChapter.prototype.tagName = 'div';

    AbstractChapter.prototype.className = 'area';

    return AbstractChapter;

  })(Abstract);

  AbstractScene = (function(_super) {

    __extends(AbstractScene, _super);

    function AbstractScene() {
      return AbstractScene.__super__.constructor.apply(this, arguments);
    }

    AbstractScene.prototype.tagName = 'div';

    AbstractScene.prototype.className = 'scene';

    return AbstractScene;

  })(Abstract);

  Carnival = (function(_super) {

    __extends(Carnival, _super);

    function Carnival() {
      this.dispose = __bind(this.dispose, this);

      this.onResize = __bind(this.onResize, this);

      this.onEnterFrame = __bind(this.onEnterFrame, this);

      this.initPathControls = __bind(this.initPathControls, this);

      this.onWorldLoaded = __bind(this.onWorldLoaded, this);

      this.onWorldProgress = __bind(this.onWorldProgress, this);

      this.onTouchMove = __bind(this.onTouchMove, this);

      this.onTouchStart = __bind(this.onTouchStart, this);

      this.onMouseMove = __bind(this.onMouseMove, this);

      this.onKeyDown = __bind(this.onKeyDown, this);

      this.onMouseClick = __bind(this.onMouseClick, this);

      this.onDOFChange = __bind(this.onDOFChange, this);

      this.onColorCorrectionChange = __bind(this.onColorCorrectionChange, this);

      this.onFogColorChange = __bind(this.onFogColorChange, this);

      this.onNormalScaleChange = __bind(this.onNormalScaleChange, this);

      this.onFresnelPowerChange = __bind(this.onFresnelPowerChange, this);

      this.onNumTentsChange = __bind(this.onNumTentsChange, this);

      this.onCameraDistanceChange = __bind(this.onCameraDistanceChange, this);

      this.onCameraFovChange = __bind(this.onCameraFovChange, this);

      this.init = __bind(this.init, this);
      return Carnival.__super__.constructor.apply(this, arguments);
    }

    Carnival.prototype.guicontainer = null;

    Carnival.prototype.camera = null;

    Carnival.prototype.scene = null;

    Carnival.prototype.renderer = null;

    Carnival.prototype.controls = null;

    Carnival.prototype.clock = null;

    Carnival.prototype.renderTarget = null;

    Carnival.prototype.composer = null;

    Carnival.prototype.APP_HEIGHT = 800;

    Carnival.prototype.APP_WIDTH = 600;

    Carnival.prototype.APP_HALF_X = 800 / 2;

    Carnival.prototype.APP_HALF_Y = 600 / 2;

    Carnival.prototype.mouseX = 0;

    Carnival.prototype.mouseY = 0;

    Carnival.prototype.lensFlare = null;

    Carnival.prototype.skyCubeTexture = null;

    Carnival.prototype.skyCube = null;

    Carnival.prototype.bigWheel = null;

    Carnival.prototype.crousel = null;

    Carnival.prototype.ground = null;

    Carnival.prototype.pointer = null;

    Carnival.prototype.pickMouse = null;

    Carnival.prototype.projector = null;

    Carnival.prototype.gui = null;

    Carnival.prototype.params = null;

    Carnival.prototype.colorCorrection = null;

    Carnival.prototype.effectBloom = null;

    Carnival.prototype.renderModel = null;

    Carnival.prototype.effectFilm = null;

    Carnival.prototype.vblur = null;

    Carnival.prototype.hblur = null;

    Carnival.prototype.dofpost = null;

    Carnival.prototype.tentModel = null;

    Carnival.prototype.numTents = 1;

    Carnival.prototype.instancedTents = [];

    Carnival.prototype.init = function() {
      var ambient, controller;
      this.clock = new THREE.Clock();
      this.pickMouse = {
        x: 0,
        y: 0
      };
      this.projector = new THREE.Projector();
      this.APP_WIDTH = $(window).width();
      this.APP_HEIGHT = $(window).height();
      this.renderer = new THREE.WebGLRenderer({
        antialias: false
      });
      this.renderer.autoClear = false;
      this.renderer.gammaInput = false;
      this.renderer.gammaOutput = true;
      this.renderer.sortObjects = false;
      this.renderer.shadowMapEnabled = false;
      this.renderer.shadowMapSoft = true;
      this.renderer.setSize(this.APP_WIDTH, this.APP_HEIGHT);
      this.camera = new THREE.PerspectiveCamera(50, this.APP_WIDTH / this.APP_HEIGHT, 10, 100000);
      this.camera.position.x = -25;
      this.camera.position.y = 15;
      this.camera.position.z = 150;
      this.camera.target = new THREE.Vector3(this.camera.position.x, 40, 0);
      this.scene = new THREE.Scene();
      this.scene.fog = new THREE.Fog(0xcaa46f, 0, 659);
      ambient = new THREE.AmbientLight(0xFFFFFF);
      this.scene.add(ambient);
      this.initComposer();
      this.initSky();
      this.initSun();
      this.loader = new IFLLoader();
      this.loader.sky = this.skyCubeTexture;
      this.loader.load("models/carnival.if3d", this.onWorldLoaded, this.onWorldProgress);
      document.addEventListener('mousemove', this.onMouseMove, false);
      document.addEventListener('keydown', this.onKeyDown, false);
      this.loading = $("<div>Loading Resources<div>");
      this.progressbar = $("<div></div>");
      this.loading.append(this.progressbar);
      this.progressbar.progressbar({
        value: 0
      });
      this.addChild(this.loading);
      this.onResize();
      this.params = {
        cameraFOV: 50,
        cameraDistance: 150,
        mFresnelBias: 0.0,
        mFresnelGain: 1,
        mFresnelPower: 0.0,
        normalScale: 1.0,
        colorCorrectionPow: [46, 51, 89],
        colorCorrectionPowM: 1.4,
        colorCorrectionMul: [227, 209, 209],
        colorCorrectionMulM: 1.6,
        colorCorrectionSaturation: -50,
        colorCorrectionSaturationColors: [0, 0, 0],
        bloomPower: 0.39,
        fogcolor: [202, 164, 111]
      };
      this.onColorCorrectionChange();
      this.gui = new dat.GUI({
        width: 400,
        autoPlace: false
      });
      controller = this.gui.add(this, 'numTents', 1, 50).name('Number of Tents').step(1);
      controller.onChange(this.onNumTentsChange);
      controller = this.gui.add(this.scene.fog, 'near', 0, 1000).name('Fog Near');
      controller = this.gui.add(this.scene.fog, 'far', 100, 2000).name('Fog Far');
      controller = this.gui.addColor(this.params, 'fogcolor').name('Fog Color');
      controller.onChange(this.onFogColorChange);
      controller = this.gui.add(this.params, 'cameraFOV', 0, 100).name('Camera FOV');
      controller.onChange(this.onCameraFovChange);
      controller = this.gui.add(this.params, 'cameraDistance', 0, 1000).name('Camera Distance');
      controller.onChange(this.onCameraDistanceChange);
      controller = this.gui.add(this.effectFilm, 'enabled').name('Enable Film Grain');
      controller = this.gui.add(this.vblur, 'enabled').name('Enable Vertical Blur');
      controller = this.gui.add(this.hblur, 'enabled').name('Enable Horizontal Blur');
      controller = this.gui.add(this.effectBloom, 'enabled').name('Enable Bloom');
      controller = this.gui.add(this.effectBloom.screenUniforms.opacity, 'value', 0, 10).name('Bloom Power');
      controller.onChange(this.onBloomPowerChange);
      controller = this.gui.add(this.params, 'mFresnelPower', -5, 5).name('Fresnel Power');
      controller.onChange(this.onFresnelPowerChange);
      controller = this.gui.add(this.params, 'normalScale', 0, 10).name('Normal Scale');
      controller.onChange(this.onNormalScaleChange);
      controller = this.gui.addColor(this.params, 'colorCorrectionPow').name('Color Power');
      controller.onChange(this.onColorCorrectionChange);
      controller = this.gui.add(this.params, 'colorCorrectionPowM', 0, 2).name('Color Power Intensity');
      controller.onChange(this.onColorCorrectionChange);
      controller = this.gui.addColor(this.params, 'colorCorrectionMul').name('Color Multiplier');
      controller.onChange(this.onColorCorrectionChange);
      controller = this.gui.add(this.params, 'colorCorrectionMulM', 0, 2).name('Color Multiplier Intensity');
      controller.onChange(this.onColorCorrectionChange);
      controller = this.gui.add(this.params, 'colorCorrectionSaturation', -100, 100).name('Saturation');
      controller.onChange(this.onColorCorrectionChange);
      controller = this.gui.addColor(this.params, 'colorCorrectionSaturationColors').name('Saturated Colors');
      controller.onChange(this.onColorCorrectionChange);
      controller = this.gui.add(this.colorCorrection.uniforms.vignetteOffset, 'value', 0, 10).name('Vignette Offset');
      controller = this.gui.add(this.colorCorrection.uniforms.vignetteDarkness, 'value', 0, 10).name('Vignette Darkness');
      this.guicontainer = $('<div/>');
      this.guicontainer.dispose = function() {};
      this.guicontainer.css({
        "position": "absolute",
        "right": "0px",
        "top": "0px"
      });
      this.guicontainer.append(this.gui.domElement);
      this.renderer.domElement.dispose = function() {};
      this.addChild(this.renderer.domElement);
      this.initDOF();
      controller = this.gui.add(this.dofpost, 'enabled').name('Enable DOF');
      controller = this.gui.add(this.dofpost, "focus", 0.0, 3.0).name('DOF Focus');
      controller.onChange(this.onDOFChange);
      controller = this.gui.add(this.dofpost, "aperture", 0.001, 0.04).name('DOF Aperture');
      controller.onChange(this.onDOFChange);
      controller = this.gui.add(this.dofpost, "maxblur", 0.0, 0.03).name('DOF MaxBlur');
      controller.onChange(this.onDOFChange);
    };

    Carnival.prototype.onCameraFovChange = function(value) {
      this.camera.fov = value;
      return this.camera.updateProjectionMatrix();
    };

    Carnival.prototype.onCameraDistanceChange = function(value) {
      return this.camera.position.set(this.camera.position.x, this.camera.position.y, value);
    };

    Carnival.prototype.onNumTentsChange = function(value) {
      var i, mat, tent, _i, _j, _len, _ref, _ref1;
      if (this.tentModel) {
        _ref = this.instancedTents;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          tent = _ref[_i];
          this.scene.remove(tent);
        }
        for (i = _j = 0, _ref1 = this.numTents; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
          if (!this.instancedTents[i]) {
            mat = this.loader.convertFresnelMaterial({});
            this.instancedTents[i] = new THREE.Mesh(THREE.GeometryUtils.clone(this.tentModel.geometry), mat);
            if (i !== 0) {
              this.instancedTents[i].position.set(-2000 + (i % 10) * 400, 0, -(i / 10) * 400);
            }
          }
          this.scene.add(this.instancedTents[i]);
        }
      }
    };

    Carnival.prototype.onFresnelPowerChange = function(value) {
      return this.fresnel.uniforms['mFresnelPower'].value = value;
    };

    Carnival.prototype.onNormalScaleChange = function(value) {
      return this.fresnel.uniforms['normalScale'].value = new THREE.Vector2(value, value);
    };

    Carnival.prototype.onFogColorChange = function(value) {
      return this.scene.fog.color.setRGB(value[0] / 255, value[1] / 255, value[2] / 255);
    };

    Carnival.prototype.onColorCorrectionChange = function(value) {
      var mul, mulB, mulG, mulR, pow, powB, powG, powR, sat, satB, satG, satR;
      pow = this.params.colorCorrectionPowM;
      powR = 1 - (this.params.colorCorrectionPow[0] / 255);
      powG = 1 - (this.params.colorCorrectionPow[1] / 255);
      powB = 1 - (this.params.colorCorrectionPow[2] / 255);
      this.colorCorrection.uniforms['powRGB'].value.set(pow * powR, pow * powG, pow * powB);
      mul = this.params.colorCorrectionMulM;
      mulR = this.params.colorCorrectionMul[0] / 255;
      mulG = this.params.colorCorrectionMul[1] / 255;
      mulB = this.params.colorCorrectionMul[2] / 255;
      this.colorCorrection.uniforms['mulRGB'].value.set(mul * mulR, mul * mulG, mul * mulB);
      sat = -this.params.colorCorrectionSaturation / 100;
      satR = 1 - (this.params.colorCorrectionSaturationColors[0] / 255);
      satG = 1 - (this.params.colorCorrectionSaturationColors[1] / 255);
      satB = 1 - (this.params.colorCorrectionSaturationColors[2] / 255);
      return this.colorCorrection.uniforms['saturation'].value.set(sat * satR, sat * satG, sat * satB, 1);
    };

    Carnival.prototype.onDOFChange = function(value) {
      this.dofpost.bokeh_uniforms["focus"].value = this.dofpost.focus;
      this.dofpost.bokeh_uniforms["aperture"].value = this.dofpost.aperture;
      return this.dofpost.bokeh_uniforms["maxblur"].value = this.dofpost.maxblur;
    };

    Carnival.prototype.initDOF = function() {
      var bokeh_shader, pars;
      this.dofpost = {
        enabled: false,
        focus: 0.68,
        aperture: 0.019,
        maxblur: 0.007
      };
      this.dofpost.material_depth = new THREE.MeshDepthMaterial();
      this.dofpost.scene = new THREE.Scene();
      this.dofpost.camera = new THREE.OrthographicCamera(this.APP_WIDTH / -2, this.APP_WIDTH / 2, this.APP_HEIGHT / 2, this.APP_HEIGHT / -2, -10000, 10000);
      this.dofpost.camera.position.z = 100;
      this.dofpost.scene.add(this.dofpost.camera);
      pars = {
        minFilter: THREE.LinearFilter,
        magFilter: THREE.LinearFilter,
        format: THREE.RGBFormat
      };
      this.dofpost.rtTextureDepth = new THREE.WebGLRenderTarget(this.APP_WIDTH, this.APP_HEIGHT, pars);
      this.dofpost.rtTextureColor = new THREE.WebGLRenderTarget(this.APP_WIDTH, this.APP_HEIGHT, pars);
      bokeh_shader = THREE.BokehShader;
      this.dofpost.bokeh_uniforms = THREE.UniformsUtils.clone(bokeh_shader.uniforms);
      this.dofpost.bokeh_uniforms["tColor"].value = this.dofpost.rtTextureColor;
      this.dofpost.bokeh_uniforms["tDepth"].value = this.dofpost.rtTextureDepth;
      this.dofpost.bokeh_uniforms["focus"].value = this.dofpost.focus;
      this.dofpost.bokeh_uniforms["aperture"].value = this.dofpost.aperture;
      this.dofpost.bokeh_uniforms["maxblur"].value = this.dofpost.maxblur;
      this.dofpost.bokeh_uniforms["aspect"].value = this.APP_WIDTH / this.APP_HEIGHT;
      this.dofpost.materialBokeh = new THREE.ShaderMaterial({
        uniforms: this.dofpost.bokeh_uniforms,
        vertexShader: bokeh_shader.vertexShader,
        fragmentShader: bokeh_shader.fragmentShader
      });
      this.dofpost.quad = new THREE.Mesh(new THREE.PlaneGeometry(this.APP_WIDTH, this.APP_HEIGHT), this.dofpost.materialBokeh);
      this.dofpost.quad.position.z = -500;
      return this.dofpost.scene.add(this.dofpost.quad);
    };

    Carnival.prototype.initComposer = function() {
      var bluriness, fxaa, renderTargetParameters;
      renderTargetParameters = {
        minFilter: THREE.LinearFilter,
        magFilter: THREE.LinearFilter,
        format: THREE.RGBFormat
      };
      this.renderTarget = new THREE.WebGLRenderTarget(this.APP_WIDTH, this.APP_HEIGHT, renderTargetParameters);
      this.composer = new THREE.EffectComposer(this.renderer, this.renderTarget);
      this.renderModel = new THREE.RenderPass(this.scene, this.camera, null, false, false);
      this.effectBloom = new THREE.BloomPass(.39);
      this.effectBloom.enabled = true;
      this.effectFilm = new THREE.FilmPass(0.10, 0.20, this.APP_HEIGHT * 2, false);
      this.effectFilm.enabled = false;
      this.colorCorrection = new THREE.ShaderPass(new IFLColorCorrectionShader);
      fxaa = new THREE.ShaderPass(THREE.ShaderExtras["fxaa"]);
      fxaa.uniforms['resolution'].value = new THREE.Vector2(1 / this.APP_WIDTH, 1 / this.APP_HEIGHT);
      this.hblur = new THREE.ShaderPass(THREE.ShaderExtras["horizontalTiltShift"]);
      this.vblur = new THREE.ShaderPass(THREE.ShaderExtras["verticalTiltShift"]);
      this.vblur.enabled = false;
      this.hblur.enabled = false;
      bluriness = 2;
      this.hblur.uniforms['h'].value = bluriness / this.APP_WIDTH;
      this.vblur.uniforms['v'].value = bluriness / this.APP_HEIGHT;
      this.hblur.uniforms['r'].value = this.vblur.uniforms['r'].value = 0.5;
      this.composer.addPass(this.renderModel);
      this.composer.addPass(this.effectBloom);
      this.composer.addPass(this.effectFilm);
      this.composer.addPass(this.hblur);
      this.composer.addPass(this.vblur);
      this.composer.addPass(this.colorCorrection);
      return this.colorCorrection.renderToScreen = true;
    };

    Carnival.prototype.onMouseClick = function(event) {};

    Carnival.prototype.onKeyDown = function(event) {
      if (event.ctrlKey && event.keyCode === 73) {
        return this.addChild(this.guicontainer);
      }
    };

    Carnival.prototype.onMouseMove = function(event) {
      this.mouseX = event.pageX - this.APP_HALF_X;
      this.mouseY = event.pageY - this.APP_HALF_Y;
      this.pickMouse.x = (event.clientX / this.APP_WIDTH) * 2 - 1;
      return this.pickMouse.y = -(event.clientY / this.APP_HEIGHT) * 2 + 1;
    };

    Carnival.prototype.onTouchStart = function(event) {
      var mouseX, mouseY;
      if (event.touches.length === 1) {
        event.preventDefault();
        mouseX = event.touches[0].pageX - this.APP_HALF_X;
        return mouseY = event.touches[0].pageY - this.APP_HALF_Y;
      }
    };

    Carnival.prototype.onTouchMove = function(event) {
      var mouseX, mouseY;
      if (event.touches.length === 1) {
        event.preventDefault();
        mouseX = event.touches[0].pageX - this.APP_HALF_X;
        return mouseY = event.touches[0].pageY - this.APP_HALF_Y;
      }
    };

    Carnival.prototype.onWorldProgress = function(loaded, total) {
      return this.progressbar.progressbar("option", "value", (loaded * 100) / total);
    };

    Carnival.prototype.onWorldLoaded = function(iflscene) {
      var descendant, descendants, _i, _len;
      descendants = iflscene.getDescendants();
      for (_i = 0, _len = descendants.length; _i < _len; _i++) {
        descendant = descendants[_i];
        if (!this.fresnel) {
          this.tentModel = descendant;
          iflscene.remove(descendant);
          this.fresnel = descendant.material;
        }
      }
      this.scene.add(iflscene);
      this.onNumTentsChange(this.numTents);
      this.loading.remove();
      this.scene.add(this.skyCube);
      return this.scene.add(this.lensFlare);
    };

    Carnival.prototype.initPathControls = function(data) {
      this.controls = new THREE.PathControls(this.camera);
      this.controls.waypoints = data.waypoints;
      this.controls.duration = 100;
      this.controls.useConstantSpeed = true;
      this.controls.createDebugPath = false;
      this.controls.createDebugDummy = false;
      this.controls.lookSpeed = 0.5;
      this.controls.lookVertical = true;
      this.controls.lookHorizontal = true;
      this.controls.verticalAngleMap = {
        srcRange: [0, 2 * Math.PI],
        dstRange: [1.3, 2.2]
      };
      this.controls.horizontalAngleMap = {
        srcRange: [0, 2 * Math.PI],
        dstRange: [1, Math.PI - 1]
      };
      this.controls.init();
      this.scene.add(this.controls.debugPath);
      return this.scene.add(this.controls.animationParent);
    };

    Carnival.prototype.initSun = function() {
      var flareColor, sunLight, textureFlare0, textureFlare3,
        _this = this;
      sunLight = new THREE.DirectionalLight();
      sunLight.color.setRGB(1, 1, 1);
      sunLight.position.set(-5000, 1000, -5000);
      sunLight.intensity = 1;
      sunLight.castShadow = true;
      sunLight.shadowCameraNear = 20;
      sunLight.shadowCameraFar = 100000;
      sunLight.shadowCameraFov = 70;
      sunLight.shadowMapWidth = 1024;
      sunLight.shadowMapHeight = 1024;
      sunLight.shadowDarkness = .4;
      sunLight.shadowCameraLeft = 200;
      sunLight.shadowCameraRight = -200;
      sunLight.shadowCameraTop = 100;
      sunLight.shadowCameraBottom = -500;
      this.scene.add(sunLight);
      textureFlare0 = THREE.ImageUtils.loadTexture("models/textures/lensflare/lensflare0.png");
      textureFlare3 = THREE.ImageUtils.loadTexture("models/textures/lensflare/hexangle.png");
      flareColor = new THREE.Color(0xFFFFFF);
      this.lensFlare = new THREE.LensFlare(textureFlare0, 1000, 0.0, THREE.AdditiveBlending, flareColor);
      this.lensFlare.position = sunLight.position;
      this.lensFlare.add(textureFlare3, 60, 0.6, THREE.AdditiveBlending);
      this.lensFlare.add(textureFlare3, 70, 0.7, THREE.AdditiveBlending);
      this.lensFlare.add(textureFlare3, 120, 0.9, THREE.AdditiveBlending);
      this.lensFlare.add(textureFlare3, 70, 1.0, THREE.AdditiveBlending);
      this.lensFlare.customUpdateCallback = function(object) {
        var flare, vecX, vecY, _i, _len, _ref;
        vecX = -object.positionScreen.x * 2;
        vecY = -object.positionScreen.y * 2;
        _ref = object.lensFlares;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          flare = _ref[_i];
          flare.x = object.positionScreen.x + vecX * flare.distance;
          flare.y = object.positionScreen.y + vecY * flare.distance;
          flare.rotation = 0;
        }
        object.lensFlares[2].y += 0.025;
        return object.lensFlares[3].rotation = object.positionScreen.x * 0.5 + 45 * Math.PI / 180;
      };
      return null;
    };

    Carnival.prototype.initSky = function() {
      var cubeShader, format, material, path, skyText, urls;
      path = "models/textures/carnivalsky/";
      format = '.png';
      urls = [path + 'posx' + format, path + 'negx' + format, path + 'posy' + format, path + 'negy' + format, path + 'posz' + format, path + 'negz' + format];
      this.skyCubeTexture = THREE.ImageUtils.loadTextureCube(urls);
      this.skyCubeTexture.format = THREE.RGBFormat;
      path = "models/textures/skybloom/";
      format = '.png';
      urls = [path + 'posx' + format, path + 'negx' + format, path + 'posy' + format, path + 'negy' + format, path + 'negz' + format, path + 'posz' + format];
      skyText = THREE.ImageUtils.loadTextureCube(urls);
      skyText.format = THREE.RGBFormat;
      cubeShader = new IFLSkyCubeShader;
      cubeShader.uniforms["tCube"].value = skyText;
      cubeShader.uniforms["tFlip"].value = true;
      material = new THREE.ShaderMaterial({
        fragmentShader: cubeShader.fragmentShader,
        vertexShader: cubeShader.vertexShader,
        uniforms: cubeShader.uniforms,
        depthWrite: false,
        side: THREE.BackSide
      });
      this.skyCube = new THREE.Mesh(new THREE.CubeGeometry(10000, 10000, 10000), material);
      this.skyCube.name = "skyCube";
    };

    Carnival.prototype.onEnterFrame = function() {
      var cameraAbsPos, camerafar, cameranear, delta, intersections, pickVector, point, ray, _ref, _ref1;
      delta = this.clock.getDelta();
      if ((this.ground != null) && (this.controls != null) && (this.pointer != null)) {
        pickVector = new THREE.Vector3(this.pickMouse.x, this.pickMouse.y, 1);
        this.projector.unprojectVector(pickVector, this.camera);
        cameraAbsPos = this.controls.animationParent.position;
        ray = new THREE.Ray(cameraAbsPos, pickVector.subSelf(cameraAbsPos).normalize());
        intersections = ray.intersectObject(this.ground);
        if (intersections[0]) {
          point = intersections[0].point;
          this.pointer.position.set(point.x, point.y + 100, point.z);
        }
      }
      if (!(this.controls != null)) {
        this.camera.position.x += (this.mouseX - this.camera.position.x) * 0.0016;
        this.camera.position.y += (-this.mouseY - this.camera.position.y) * 0.0016;
        this.camera.position.x = Math.max(this.camera.target.x - 70, Math.min(this.camera.target.x + 200, this.camera.position.x));
        this.camera.position.y = Math.max(10, Math.min(this.camera.target.y - 15, this.camera.position.y));
        this.camera.lookAt(this.camera.target);
      }
      THREE.AnimationHandler.update(delta);
      if ((_ref = this.dcontrols) != null) {
        _ref.update();
      }
      if ((_ref1 = this.controls) != null) {
        _ref1.update(delta);
      }
      this.renderer.clear();
      if (this.dofpost.enabled) {
        this.scene.overrideMaterial = null;
        this.renderer.render(this.scene, this.camera, this.dofpost.rtTextureColor, true);
        this.scene.overrideMaterial = this.dofpost.material_depth;
        camerafar = this.camera.far;
        cameranear = this.camera.near;
        this.camera.far = 500;
        this.camera.near = 0.1;
        this.camera.updateProjectionMatrix();
        this.renderer.render(this.scene, this.camera, this.dofpost.rtTextureDepth, true);
        this.camera.far = camerafar;
        this.camera.near = cameranear;
        this.camera.updateProjectionMatrix();
        this.renderer.render(this.dofpost.scene, this.dofpost.camera, this.composer.renderTarget2, true);
        this.renderModel.enabled = false;
        this.composer.render(0.1);
      } else {
        if (this.composer != null) {
          this.renderModel.enabled = true;
          this.composer.render(0.1);
        } else {
          this.renderer.render(this.scene, this.camera);
        }
      }
    };

    Carnival.prototype.onResize = function() {
      this.APP_WIDTH = $(window).width();
      this.APP_HEIGHT = $(window).height();
      this.APP_HALF_X = this.APP_WIDTH / 2;
      this.APP_HALF_Y = this.APP_HEIGHT / 2;
      this.camera.aspect = this.APP_WIDTH / this.APP_HEIGHT;
      this.camera.updateProjectionMatrix();
      this.renderer.setSize(this.APP_WIDTH, this.APP_HEIGHT);
      if (this.composer != null) {
        this.renderTarget = new THREE.WebGLRenderTarget(this.APP_WIDTH, this.APP_HEIGHT);
        this.composer.reset(this.renderTarget);
      }
      this.loading.css({
        'position': 'absolute',
        'width': 400,
        "height": 100,
        'left': this.APP_WIDTH / 2 - 200,
        'top': this.APP_HEIGHT / 2 - 50
      });
    };

    Carnival.prototype.dispose = function() {
      this.remove(this.renderer.domElement);
      this.remove(this.guicontainer);
      return this;
    };

    return Carnival;

  })(AbstractChapter);

  LandingPage = (function(_super) {

    __extends(LandingPage, _super);

    function LandingPage() {
      this.dispose = __bind(this.dispose, this);

      this.onDebugClick = __bind(this.onDebugClick, this);

      this.onAssetsComplete = __bind(this.onAssetsComplete, this);

      this.onAssetsProgress = __bind(this.onAssetsProgress, this);

      this.onAssetsInitLoading = __bind(this.onAssetsInitLoading, this);

      this.init = __bind(this.init, this);
      return LandingPage.__super__.constructor.apply(this, arguments);
    }

    LandingPage.prototype.assetsBatch = ['landingPageAssets'];

    LandingPage.prototype.loader = null;

    LandingPage.prototype.particles = null;

    LandingPage.prototype.carnival = null;

    LandingPage.prototype.cutout = null;

    LandingPage.prototype.zoetrope = null;

    LandingPage.prototype.loading = null;

    LandingPage.prototype.storm = null;

    LandingPage.prototype.container = null;

    LandingPage.prototype.init = function() {
      this.loader = new SubLoader;
      return this.addChild(this.loader);
    };

    LandingPage.prototype.onAssetsInitLoading = function() {
      return this;
    };

    LandingPage.prototype.onAssetsProgress = function(event) {
      return this;
    };

    LandingPage.prototype.onAssetsComplete = function() {
      this.addChild(this.oz().baseAssets.get('landing').result);
      this.container = $('<div class="landingButtonsContainer"/>');
      this.addChild(this.container);
      this.carnival = new SimpleButton("carnivalBtn", "See Carnival Scene");
      this.cutout = new SimpleButton("cutoutBtn", "See Cut out Scene");
      this.zoetrope = new SimpleButton("zoetropeBtn", "See Zoetrope Scene");
      this.loading = new SimpleButton("loadingBtn", "See Loading Scene");
      this.storm = new SimpleButton("stormBtn", "See Storm Scene");
      this.carnival.on('click', this.onDebugClick);
      this.cutout.on('click', this.onDebugClick);
      this.zoetrope.on('click', this.onDebugClick);
      this.loading.on('click', this.onDebugClick);
      this.storm.on('click', this.onDebugClick);
      this.container.append(this.carnival.$el);
      this.container.append(this.cutout.$el);
      this.container.append(this.zoetrope.$el);
      this.container.append(this.loading.$el);
      this.container.append(this.storm.$el);
      this.remove(this.loader);
      return LandingPage.__super__.onAssetsComplete.call(this);
    };

    LandingPage.prototype.onDebugClick = function(event) {
      switch (event.id) {
        case "carnivalBtn":
          return this.oz().router.navigateTo('carnival');
        case "cutoutBtn":
          return this.oz().router.navigateTo('carnival/cutout');
        case "zoetropeBtn":
          return this.oz().router.navigateTo('carnival/zoetrope');
        case "loadingBtn":
          return this.oz().router.navigateTo('loading');
        case "stormBtn":
          return this.oz().router.navigateTo('storm');
      }
    };

    LandingPage.prototype.dispose = function() {
      return this;
    };

    return LandingPage;

  })(AbstractChapter);

  Loading = (function(_super) {

    __extends(Loading, _super);

    function Loading() {
      this.dispose = __bind(this.dispose, this);

      this.onMouseMove = __bind(this.onMouseMove, this);

      this.onAnimateOut = __bind(this.onAnimateOut, this);

      this.loadingComplete = __bind(this.loadingComplete, this);

      this.onAnimateIn = __bind(this.onAnimateIn, this);

      this.render = __bind(this.render, this);

      this.init = __bind(this.init, this);
      return Loading.__super__.constructor.apply(this, arguments);
    }

    Loading.prototype.angleX = 0;

    Loading.prototype.angleY = 0;

    Loading.prototype.card = null;

    Loading.prototype.init = function() {
      this.card = new LoadingCard;
      this.card.on('loadComplete', this.loadingComplete);
      this.addChild(this.card);
      this.onResize();
      return this.render();
    };

    Loading.prototype.render = function() {
      this.card.animateIn(this.onAnimateIn);
      return this;
    };

    Loading.prototype.onAnimateIn = function() {
      return $(window).bind('mousemove', this.onMouseMove);
    };

    Loading.prototype.loadingComplete = function() {
      return setTimeout(this.onAnimateOut, 700);
    };

    Loading.prototype.onAnimateOut = function() {
      $(window).unbind('mousemove', this.onMouseMove);
      return this.card.animateOut();
    };

    Loading.prototype.onMouseMove = function(event) {
      var x, y;
      if (!!this.paused) {
        return;
      }
      x = (event.clientX - ($(window).innerWidth() / 2)) / 40;
      y = (event.clientY - ($(window).innerHeight() / 2)) / 35;
      this.angleX += (x - this.angleX) * .1;
      this.angleY += (y - this.angleY) * .1;
      this.angleX = this.angleX % 360;
      this.angleY = this.angleY % 360;
      return this.card.transform(this.angleX, this.angleY);
    };

    Loading.prototype.dispose = function() {
      $(window).unbind('mousemove', this.onMouseMove);
      return this;
    };

    return Loading;

  })(AbstractChapter);

  Payoff = (function(_super) {

    __extends(Payoff, _super);

    function Payoff() {
      this.dispose = __bind(this.dispose, this);
      return Payoff.__super__.constructor.apply(this, arguments);
    }

    Payoff.prototype.init = function() {
      var h;
      this.addChild(this.oz().baseAssets.get('landing').result);
      h = new Hotspot({
        label: 'test 1'
      });
      h.move(200, 20);
      return this.addChild(h);
    };

    Payoff.prototype.dispose = function() {
      return this;
    };

    return Payoff;

  })(AbstractChapter);

  Cutout = (function(_super) {

    __extends(Cutout, _super);

    function Cutout() {
      this.dispose = __bind(this.dispose, this);

      this.onBackFromCamera = __bind(this.onBackFromCamera, this);

      this.startRenderVideo = __bind(this.startRenderVideo, this);

      this.onSelectChar = __bind(this.onSelectChar, this);

      this.render = __bind(this.render, this);

      this.onAssetsComplete = __bind(this.onAssetsComplete, this);

      this.init = __bind(this.init, this);
      return Cutout.__super__.constructor.apply(this, arguments);
    }

    Cutout.prototype.video = null;

    Cutout.prototype.select = null;

    Cutout.prototype.loader = null;

    Cutout.prototype.cta = null;

    Cutout.prototype.canvas = null;

    Cutout.prototype.charStd = null;

    Cutout.prototype.coords = null;

    Cutout.prototype.paused = true;

    Cutout.prototype.assetsBatch = ['cutoutAssets'];

    Cutout.prototype.init = function() {
      this.loader = new SubLoader;
      this.addChild(this.loader);
      this.cta = new WebcamCTA;
      this.addChild(this.cta);
      this.coords = [];
      this.coords.push({
        x: 192,
        y: 212,
        w: 227,
        h: 193
      });
      this.coords.push({
        x: 128,
        y: 56,
        w: 227,
        h: 193
      });
      return this.coords.push({
        x: 125,
        y: 82,
        w: 227,
        h: 193
      });
    };

    Cutout.prototype.onAssetsComplete = function() {
      this.remove(this.loader);
      this.render();
      return Cutout.__super__.onAssetsComplete.call(this);
    };

    Cutout.prototype.render = function() {
      this.select = new CutoutSelection;
      this.select.on('selected', this.onSelectChar);
      this.addChild(this.select);
      return this.oz().appView.changeOpening('cutoutTitle', 'cutoutSub', false, false);
    };

    Cutout.prototype.onSelectChar = function(event) {
      this.charStd = event;
      this.cta.show();
      this.video = this.oz().cam;
      this.video.on("CAM_READY", this.startRenderVideo);
      return this.video.init();
    };

    Cutout.prototype.startRenderVideo = function(event) {
      this.video.off("CAM_READY", this.startRenderVideo);
      this.remove(this.cta);
      this.select.hide();
      if (this.canvas) {
        this.canvas.show();
      } else {
        this.canvas = new CutoutCanvas;
        this.addChild(this.canvas);
        this.canvas.on('back', this.onBackFromCamera);
      }
      this.canvas.setup({
        coord: this.coords[this.charStd.id],
        videoSrc: this.video.get(),
        img: this.charStd.src,
        attr: {
          width: '491',
          height: '768'
        }
      });
      return this.paused = false;
    };

    Cutout.prototype.onBackFromCamera = function() {
      this.canvas.hide();
      this.select.reset();
      return this.select.show();
    };

    Cutout.prototype.dispose = function() {
      this.paused = true;
      return this;
    };

    return Cutout;

  })(AbstractScene);

  CutoutCanvas = (function(_super) {

    __extends(CutoutCanvas, _super);

    function CutoutCanvas() {
      this.dispose = __bind(this.dispose, this);

      this.onEnterFrame = __bind(this.onEnterFrame, this);

      this.setup = __bind(this.setup, this);

      this.back = __bind(this.back, this);

      this.takePicture = __bind(this.takePicture, this);

      this.init = __bind(this.init, this);
      return CutoutCanvas.__super__.constructor.apply(this, arguments);
    }

    CutoutCanvas.prototype.className = "cutout_canvas";

    CutoutCanvas.prototype.ctx = null;

    CutoutCanvas.prototype.cutout = null;

    CutoutCanvas.prototype.coord = null;

    CutoutCanvas.prototype.canvas = null;

    CutoutCanvas.prototype.pictureBtn = null;

    CutoutCanvas.prototype.backBtn = null;

    CutoutCanvas.prototype.preview = null;

    CutoutCanvas.prototype.init = function() {
      this.canvas = $('<canvas class="coutout_canvas_dom"/>');
      this.pictureBtn = new SimpleButton("pictureBtn", this.oz().locale.get('cutoutPicBtn'));
      this.backBtn = new SimpleButton("backBtn", this.oz().locale.get('cutoutExit'));
      this.preview = new CutoutPreview;
      this.addChild(this.canvas);
      this.addChild(this.pictureBtn);
      this.addChild(this.backBtn);
      this.addChild(this.preview);
      this.pictureBtn.on('click', this.takePicture);
      this.backBtn.on('click', this.back);
      return this;
    };

    CutoutCanvas.prototype.takePicture = function() {
      return this.preview.set(this.canvas.get()[0].toDataURL("image/jpeg"));
    };

    CutoutCanvas.prototype.back = function() {
      return this.trigger('back');
    };

    CutoutCanvas.prototype.setup = function(params) {
      var k, v, _ref, _ref1,
        _this = this;
      _ref = params.attr;
      for (k in _ref) {
        v = _ref[k];
        this.canvas.attr(k, v);
      }
      _ref1 = params.css;
      for (k in _ref1) {
        v = _ref1[k];
        this.canvas.css(k, v);
      }
      this.coord = params.coord;
      this.ctx = this.canvas.get()[0].getContext('2d');
      this.ctx.translate(566, 0);
      this.ctx.scale(-1, 1);
      this.cutout = new Image();
      this.cutout.onload = function() {
        return _this.ctx.drawImage(_this.cutout, 0, 0);
      };
      return this.cutout.src = params.img;
    };

    CutoutCanvas.prototype.onEnterFrame = function() {
      this.ctx.drawImage(this.oz().cam.dom(), this.coord.x, this.coord.y, this.coord.w, this.coord.h);
      return this.ctx.drawImage(this.cutout, 0, 0);
    };

    CutoutCanvas.prototype.dispose = function() {
      return this;
    };

    return CutoutCanvas;

  })(Abstract);

  CutoutCharacter = (function(_super) {

    __extends(CutoutCharacter, _super);

    function CutoutCharacter() {
      this.dispose = __bind(this.dispose, this);

      this.onClick = __bind(this.onClick, this);

      this.set = __bind(this.set, this);
      return CutoutCharacter.__super__.constructor.apply(this, arguments);
    }

    CutoutCharacter.prototype.className = 'cutout_character';

    CutoutCharacter.prototype.charID = null;

    CutoutCharacter.prototype.src = null;

    CutoutCharacter.prototype.set = function(img) {
      this.addChild(img.result);
      this.src = img.src.toString();
      this.charID = this.src.charAt(this.src.lastIndexOf('.') - 1);
      return this.$el.click(this.onClick);
    };

    CutoutCharacter.prototype.onClick = function() {
      return this.trigger('click', {
        src: this.src,
        id: this.charID
      });
    };

    CutoutCharacter.prototype.dispose = function() {
      return this;
    };

    return CutoutCharacter;

  })(Abstract);

  CutoutPreview = (function(_super) {

    __extends(CutoutPreview, _super);

    function CutoutPreview() {
      this.dispose = __bind(this.dispose, this);

      this.close = __bind(this.close, this);

      this.set = __bind(this.set, this);

      this.init = __bind(this.init, this);
      return CutoutPreview.__super__.constructor.apply(this, arguments);
    }

    CutoutPreview.prototype.className = 'cutout_preview';

    CutoutPreview.prototype.container = null;

    CutoutPreview.prototype.init = function() {
      this.container = $('<div/>');
      this.addChild(this.container);
      return this.$el.click(this.close);
    };

    CutoutPreview.prototype.set = function(image) {
      this.container.empty();
      this.container.append("<img src='" + image + "'/>");
      return this.$el.css({
        display: 'block'
      });
    };

    CutoutPreview.prototype.close = function() {
      return this.$el.css({
        display: 'none'
      });
    };

    CutoutPreview.prototype.dispose = function() {
      return this;
    };

    return CutoutPreview;

  })(Abstract);

  CutoutSelection = (function(_super) {

    __extends(CutoutSelection, _super);

    function CutoutSelection() {
      this.reset = __bind(this.reset, this);

      this.dispose = __bind(this.dispose, this);

      this.onCharClicked = __bind(this.onCharClicked, this);

      this.init = __bind(this.init, this);
      return CutoutSelection.__super__.constructor.apply(this, arguments);
    }

    CutoutSelection.prototype.className = 'cutout_selection';

    CutoutSelection.prototype.chars = null;

    CutoutSelection.prototype.init = function() {
      var char, i, images, _i, _len, _results;
      images = ['cutoutCharacter0', 'cutoutCharacter1', 'cutoutCharacter2'];
      this.chars = [];
      _results = [];
      for (_i = 0, _len = images.length; _i < _len; _i++) {
        i = images[_i];
        char = new CutoutCharacter;
        this.chars.push(char);
        char.set(this.oz().baseAssets.get(i));
        char.on('click', this.onCharClicked);
        _results.push(this.addChild(char));
      }
      return _results;
    };

    CutoutSelection.prototype.onCharClicked = function(event) {
      var i, _i, _len, _ref;
      _ref = this.chars;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (event.id !== i.charID) {
          i.$el.hide();
        }
      }
      return this.trigger('selected', event);
    };

    CutoutSelection.prototype.dispose = function() {
      return this;
    };

    CutoutSelection.prototype.reset = function() {
      var i, _i, _len, _ref, _results;
      _ref = this.chars;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        _results.push(i.$el.show());
      }
      return _results;
    };

    return CutoutSelection;

  })(Abstract);

  LoadingCard = (function(_super) {

    __extends(LoadingCard, _super);

    function LoadingCard() {
      this.dispose = __bind(this.dispose, this);

      this.onTransitionEnd = __bind(this.onTransitionEnd, this);

      this.animateOut = __bind(this.animateOut, this);

      this.animateIn = __bind(this.animateIn, this);

      this.transform = __bind(this.transform, this);

      this.onEnterFrame = __bind(this.onEnterFrame, this);

      this.init = __bind(this.init, this);
      return LoadingCard.__super__.constructor.apply(this, arguments);
    }

    LoadingCard.prototype.className = 'card';

    LoadingCard.prototype.frontImage = null;

    LoadingCard.prototype.containerFront = null;

    LoadingCard.prototype.containerBack = null;

    LoadingCard.prototype.cardWidth = 228;

    LoadingCard.prototype.cardHeight = 333;

    LoadingCard.prototype.counter = 0;

    LoadingCard.prototype.init = function() {
      this.containerFront = new SSAsset('interface', 'card_front');
      this.containerFront.addChild($('<span class="percLoadingTop"/>'));
      this.containerFront.addChild($('<span class="percLoadingBottom"/>'));
      this.containerFront.$el.addClass('cardImg');
      this.containerBack = new SSAsset('interface', 'card_back');
      this.containerBack.$el.addClass('cardImgBack');
      this.containerFront.$el.css({
        display: 'none'
      });
      this.addChild(this.containerFront);
      return this.addChild(this.containerBack);
    };

    LoadingCard.prototype.onEnterFrame = function() {
      var p, percBot, percTop;
      if (!!this.paused) {
        return;
      }
      if (this.counter < 99) {
        percTop = this.containerFront.$el.find('.percLoadingTop');
        percBot = this.containerFront.$el.find('.percLoadingBottom');
        p = this.counter.toFixed(0) < 10 ? "0" + this.counter.toFixed(0) : this.counter.toFixed(0);
        percTop.html(p);
        percBot.html(p);
        this.counter += .5;
        this.counter = this.counter % 100;
      } else {
        this.paused = true;
        this.trigger('loadComplete');
      }
      return LoadingCard.__super__.onEnterFrame.call(this);
    };

    LoadingCard.prototype.transform = function(x, y, time, ease, callback) {
      if (time == null) {
        time = 0;
      }
      if (ease == null) {
        ease = 'linear';
      }
      if (callback == null) {
        callback = null;
      }
      return this.$el.transition({
        perspective: this.cardHeight,
        rotateY: x,
        rotateX: y
      }, time, ease, callback);
    };

    LoadingCard.prototype.animateIn = function(onComplete) {
      var _this = this;
      this.transform(-360, -20);
      this.$el.transition({
        scale: 0
      }, 0);
      return this.$el.transition({
        perspective: this.cardHeight,
        rotateY: -270,
        scale: .5
      }, 400, 'in', function() {
        _this.containerFront.css({
          display: 'block'
        });
        _this.containerBack.css({
          display: 'none'
        });
        return _this.$el.transition({
          perspective: _this.cardHeight,
          rotateY: 0,
          rotateX: 0,
          scale: 1
        }, 500, 'ease', onComplete);
      });
    };

    LoadingCard.prototype.animateOut = function(onComplete) {
      var _this = this;
      return this.$el.transition({
        perspective: this.cardHeight,
        rotateY: 90,
        rotateX: 5,
        rotate: '-11.25deg',
        scale: 1.5
      }, 200, "in", function() {
        _this.containerFront.css({
          display: 'none'
        });
        _this.containerBack.css({
          display: 'block'
        });
        _this.$el.bind('webkitTransitionEnd', _this.onTransitionEnd);
        _this.$el.removeAttr('style');
        _this.$el.addClass('cardAnimateOut');
        return _this.$el.animate({
          opacity: 0
        }, 80);
      });
    };

    LoadingCard.prototype.onTransitionEnd = function(event) {
      this.$el.addClass('cardAnimateTranslate');
      return this;
    };

    LoadingCard.prototype.dispose = function() {
      return this;
    };

    return LoadingCard;

  })(Abstract);

  SimpleButton = (function(_super) {

    __extends(SimpleButton, _super);

    function SimpleButton() {
      this.dispose = __bind(this.dispose, this);

      this.onclick = __bind(this.onclick, this);

      this.onout = __bind(this.onout, this);

      this.onover = __bind(this.onover, this);

      this.init = __bind(this.init, this);
      return SimpleButton.__super__.constructor.apply(this, arguments);
    }

    SimpleButton.prototype.initialize = function(_id, _label, transitionClass) {
      if (transitionClass == null) {
        transitionClass = "btanimated";
      }
      this.id = _id;
      this.label = _label;
      this.classAnimated = transitionClass;
      return SimpleButton.__super__.initialize.call(this);
    };

    SimpleButton.prototype.init = function() {
      return this.enable();
    };

    SimpleButton.prototype.onover = function() {
      return SimpleButton.__super__.onover.call(this);
    };

    SimpleButton.prototype.onout = function() {
      return SimpleButton.__super__.onout.call(this);
    };

    SimpleButton.prototype.onclick = function() {
      return this.trigger("click", this);
    };

    SimpleButton.prototype.dispose = function() {
      return this;
    };

    return SimpleButton;

  })(AbstractButton);

  Zoetrope = (function(_super) {

    __extends(Zoetrope, _super);

    function Zoetrope() {
      this.removePreview = __bind(this.removePreview, this);

      this.addPreview = __bind(this.addPreview, this);

      this.goPreview = __bind(this.goPreview, this);

      this.goMakeMovie = __bind(this.goMakeMovie, this);

      this.next = __bind(this.next, this);

      this.addLayout = __bind(this.addLayout, this);

      this.render = __bind(this.render, this);

      this.onAssetsComplete = __bind(this.onAssetsComplete, this);

      this.init = __bind(this.init, this);
      return Zoetrope.__super__.constructor.apply(this, arguments);
    }

    Zoetrope.prototype.assetsBatch = ['zoetropeAssets'];

    Zoetrope.prototype.id = "zoetrope";

    Zoetrope.prototype.init = function() {
      this.loader = new SubLoader;
      return this.addChild(this.loader);
    };

    Zoetrope.prototype.onAssetsComplete = function() {
      this.remove(this.loader);
      this.render();
      Zoetrope.__super__.onAssetsComplete.call(this);
      return this.addLayout();
    };

    Zoetrope.prototype.render = function() {
      this.oz().appView.changeOpening('zoeTitle', 'zoeCTA', false, false);
      return Zoetrope.__super__.render.call(this);
    };

    Zoetrope.prototype.addLayout = function() {
      this.create = new SimpleButton("create", "CREATE MOVIE");
      this.create.on("click", this.next);
      return this.addChild(this.create);
    };

    Zoetrope.prototype.next = function() {
      this.create.off("click");
      this.create.$el.removeClass(this.create.classAnimated);
      return this.create.$el.animate({
        opacity: 0
      }, 400, 'linear', this.goMakeMovie);
    };

    Zoetrope.prototype.goMakeMovie = function() {
      this.remove(this.create);
      this.makemovie = new ZoetropeMakeMovie;
      this.makemovie.on("PREVIEW", this.goPreview);
      return this.addChild(this.makemovie);
    };

    Zoetrope.prototype.goPreview = function() {
      return this.makemovie.$el.animate({
        opacity: 0
      }, 300, 'linear', this.addPreview);
    };

    Zoetrope.prototype.addPreview = function() {
      this.makemovie.mouseEnabled(false);
      this.preview = new ZoetropePreview;
      this.preview.on("BACK", this.removePreview);
      return this.addChild(this.preview);
    };

    Zoetrope.prototype.removePreview = function() {
      this.preview.off("BACK");
      this.remove(this.preview);
      this.makemovie.mouseEnabled(true);
      return this.makemovie.$el.animate({
        opacity: 1
      }, 300, 'linear');
    };

    return Zoetrope;

  })(AbstractScene);

  ZoetropeMakeMovie = (function(_super) {

    __extends(ZoetropeMakeMovie, _super);

    function ZoetropeMakeMovie() {
      this.dispose = __bind(this.dispose, this);

      this.fail = __bind(this.fail, this);

      this.imageSaved = __bind(this.imageSaved, this);

      this.requestSaveDone = __bind(this.requestSaveDone, this);

      this.requestSave = __bind(this.requestSave, this);

      this.goPreview = __bind(this.goPreview, this);

      this.completed = __bind(this.completed, this);

      this.stopRecord = __bind(this.stopRecord, this);

      this.startRecord = __bind(this.startRecord, this);

      this.toogleRecord = __bind(this.toogleRecord, this);

      this.start = __bind(this.start, this);

      this.init = __bind(this.init, this);
      return ZoetropeMakeMovie.__super__.constructor.apply(this, arguments);
    }

    ZoetropeMakeMovie.prototype.webcamfeed = null;

    ZoetropeMakeMovie.prototype.record = null;

    ZoetropeMakeMovie.prototype.stop = null;

    ZoetropeMakeMovie.prototype.preview = null;

    ZoetropeMakeMovie.prototype.timeline = null;

    ZoetropeMakeMovie.prototype.recording = false;

    ZoetropeMakeMovie.prototype.init = function() {
      this.webcamfeed = new ZoetropeWebcamFeed;
      this.webcamfeed.on("CAM_READY", this.start);
      this.addChild(this.webcamfeed);
      this.$el.append("<br />");
      this.timeline = new ZoetropeTimeline(this.webcamfeed.canvas);
      this.timeline.on("COMPLETED", this.completed);
      this.addChild(this.timeline);
      this.$el.append("<br />");
      this.record = new SimpleButton("record", "RECORD");
      this.record.on("click", this.toogleRecord);
      this.addChild(this.record);
      this.record.disable();
      this.preview = new SimpleButton("preview", "PREVIEW");
      this.preview.on("click", this.goPreview);
      this.addChild(this.preview);
      this.preview.disable();
      this.$el.append("<br /><br /><br /><br /><br /><br /><br />");
      this.$el.css({
        opacity: 0
      });
      this.$el.animate({
        opacity: 1
      }, 800, 'linear');
      return this.requestSave();
    };

    ZoetropeMakeMovie.prototype.start = function() {
      return this.record.enable();
    };

    ZoetropeMakeMovie.prototype.toogleRecord = function() {
      if (!this.recording) {
        return this.startRecord();
      } else {
        return this.stopRecord();
      }
    };

    ZoetropeMakeMovie.prototype.startRecord = function() {
      this.recording = true;
      this.record.changeLabel("STOP");
      this.timeline.record();
      return this.preview.disable();
    };

    ZoetropeMakeMovie.prototype.stopRecord = function() {
      this.recording = false;
      this.record.changeLabel("RECORD");
      return this.timeline.stop();
    };

    ZoetropeMakeMovie.prototype.completed = function() {
      this.stopRecord();
      return this.preview.enable();
    };

    ZoetropeMakeMovie.prototype.goPreview = function() {
      return this.trigger("PREVIEW");
    };

    ZoetropeMakeMovie.prototype.requestSave = function() {
      return Requester.request({
        url: "api/image/add",
        type: "GET",
        data: null,
        dataType: "json",
        done: this.requestSaveDone,
        fail: this.fail
      });
    };

    ZoetropeMakeMovie.prototype.requestSaveDone = function(data) {
      console.log(data.result.uri);
      return Requester.send(data.result.uri, {
        file: this.timeline.canvas[0].toDataURL("image/jpeg"),
        kind: "zoetrope"
      });
    };

    ZoetropeMakeMovie.prototype.imageSaved = function(data) {
      return console.log(data);
    };

    ZoetropeMakeMovie.prototype.fail = function() {
      return console.log(arguments);
    };

    ZoetropeMakeMovie.prototype.dispose = function() {
      return this.webcamfeed.dispose();
    };

    return ZoetropeMakeMovie;

  })(Abstract);

  ZoetropePreview = (function(_super) {

    __extends(ZoetropePreview, _super);

    function ZoetropePreview() {
      this.dispose = __bind(this.dispose, this);

      this.goShare = __bind(this.goShare, this);

      this.goBack = __bind(this.goBack, this);

      this.init = __bind(this.init, this);
      return ZoetropePreview.__super__.constructor.apply(this, arguments);
    }

    ZoetropePreview.prototype.init = function() {
      this.back = new SimpleButton("back", "BACK");
      this.back.on("click", this.goBack);
      this.addChild(this.back);
      this.share = new SimpleButton("share", "SHARE");
      this.share.on("click", this.goShare);
      this.addChild(this.share);
      this.$el.css({
        opacity: 0
      });
      return this.$el.animate({
        opacity: 1
      }, 800, 'linear');
    };

    ZoetropePreview.prototype.goBack = function() {
      var _this = this;
      return this.$el.animate({
        opacity: 0
      }, 300, 'linear', function() {
        return _this.trigger("BACK");
      });
    };

    ZoetropePreview.prototype.goShare = function() {
      return this.oz().appView["static"].changePage("share", "carnival/zoetrope/id");
    };

    ZoetropePreview.prototype.dispose = function() {
      this.remove(this.back);
      return this.remove(this.share);
    };

    return ZoetropePreview;

  })(Abstract);

  ZoetropeTimeline = (function(_super) {

    __extends(ZoetropeTimeline, _super);

    function ZoetropeTimeline() {
      this.onResize = __bind(this.onResize, this);

      this.scroll = __bind(this.scroll, this);

      this.scrollRight = __bind(this.scrollRight, this);

      this.clear = __bind(this.clear, this);

      this.stop = __bind(this.stop, this);

      this.record = __bind(this.record, this);

      this.addFrame = __bind(this.addFrame, this);

      this.init = __bind(this.init, this);

      this.initialize = __bind(this.initialize, this);
      return ZoetropeTimeline.__super__.constructor.apply(this, arguments);
    }

    ZoetropeTimeline.prototype.className = "timeline";

    ZoetropeTimeline.prototype.thumbW = 200;

    ZoetropeTimeline.prototype.thumbH = 150;

    ZoetropeTimeline.prototype.canvas = null;

    ZoetropeTimeline.prototype.manualScroll = false;

    ZoetropeTimeline.prototype.webcam = null;

    ZoetropeTimeline.prototype.currentFrame = 0;

    ZoetropeTimeline.prototype.numberOfPictures = 24;

    ZoetropeTimeline.prototype.pictureInterval = 250;

    ZoetropeTimeline.prototype.timer = null;

    ZoetropeTimeline.prototype.initialize = function(webcam) {
      this.webcam = webcam;
      return ZoetropeTimeline.__super__.initialize.call(this);
    };

    ZoetropeTimeline.prototype.init = function() {
      var w;
      w = this.numberOfPictures * this.thumbW;
      this.canvas = $("<canvas width='" + w + "' height='" + this.thumbH + "'></canvas>");
      this.addChild(this.canvas);
      this.onResize();
      return this.scroll();
    };

    ZoetropeTimeline.prototype.addFrame = function() {
      this.canvas[0].getContext("2d").drawImage(this.webcam[0], this.currentFrame * this.thumbW, 0, this.thumbW, this.thumbH);
      this.currentFrame++;
      this.scrollRight();
      if (this.currentFrame > this.numberOfPictures) {
        return this.trigger("COMPLETED");
      }
    };

    ZoetropeTimeline.prototype.record = function() {
      this.clear();
      this.timer = setInterval(this.addFrame, this.pictureInterval);
      return this.manualScroll = false;
    };

    ZoetropeTimeline.prototype.stop = function() {
      clearInterval(this.timer);
      this.manualScroll = true;
      return this.currentFrame = 0;
    };

    ZoetropeTimeline.prototype.clear = function() {
      return this.canvas[0].getContext('2d').clearRect(0, 0, this.canvas.width(), this.thumbH);
    };

    ZoetropeTimeline.prototype.scrollRight = function() {
      return this.$el.stop().animate({
        scrollLeft: (this.currentFrame * this.thumbW) - this.$el.width()
      }, 500);
    };

    ZoetropeTimeline.prototype.scroll = function() {
      var _this = this;
      this.$el.css({
        "cursor": "-webkit-grab"
      });
      this.$el.mousedown(function(event) {
        $(this).data("down", true);
        $(this).data("x", event.clientX);
        $(this).data("scrollLeft", this.scrollLeft);
        return false;
      });
      this.$el.mouseup(function(event) {
        return $(this).data("down", false);
      });
      this.$el.mousemove(function(event) {
        if (_this.$el.data("down") === true && _this.manualScroll) {
          return _this.$el[0].scrollLeft = _this.$el.data("scrollLeft") + _this.$el.data("x") - event.clientX;
        }
      });
      return $(window).mouseout(function(event) {
        if (_this.$el.data("down")) {
          try {
            if (event.originalTarget.nodeName === "body" || event.originalTarget.nodeName === "html") {
              return _this.$el.data("down", false);
            }
          } catch (e) {
            return {};
          }
        }
      });
      /*
              @$el.mousewheel (event, delta) ->
                  this.scrollLeft -= delta * 30
      */

    };

    ZoetropeTimeline.prototype.onResize = function() {
      return this.$el.css({
        "width": $(window).innerWidth() - 2
      });
    };

    return ZoetropeTimeline;

  })(Abstract);

  ZoetropeWebcamFeed = (function(_super) {

    __extends(ZoetropeWebcamFeed, _super);

    function ZoetropeWebcamFeed() {
      this.dispose = __bind(this.dispose, this);

      this.onEnterFrame = __bind(this.onEnterFrame, this);

      this.startRenderVideo = __bind(this.startRenderVideo, this);

      this.init = __bind(this.init, this);
      return ZoetropeWebcamFeed.__super__.constructor.apply(this, arguments);
    }

    ZoetropeWebcamFeed.prototype.className = "webcamfeed";

    ZoetropeWebcamFeed.prototype.video = null;

    ZoetropeWebcamFeed.prototype.canvas = null;

    ZoetropeWebcamFeed.prototype.videoW = 320;

    ZoetropeWebcamFeed.prototype.videoH = 240;

    ZoetropeWebcamFeed.prototype.init = function() {
      this.canvas = $("<canvas class='videocanvas' width='" + this.videoW + "' height='" + this.videoH + "'/>");
      this.addChild(this.canvas);
      this.canvas[0].getContext("2d").translate(this.videoW, 0);
      this.canvas[0].getContext("2d").scale(-1, 1);
      this.video = this.oz().cam;
      this.video.on("CAM_READY", this.startRenderVideo);
      return this.video.init();
    };

    ZoetropeWebcamFeed.prototype.startRenderVideo = function(event) {
      this.trigger("CAM_READY");
      this.video.off("CAM_READY", this.startRenderVideo);
      return this.video.get();
    };

    ZoetropeWebcamFeed.prototype.onEnterFrame = function() {
      return this.canvas[0].getContext("2d").drawImage(this.oz().cam.dom(), 0, 0, this.canvas.width(), this.canvas.height());
    };

    ZoetropeWebcamFeed.prototype.dispose = function() {
      this.canvas.remove();
      return this.oz().cam.dispose();
    };

    return ZoetropeWebcamFeed;

  })(Abstract);

  Storm = (function(_super) {

    __extends(Storm, _super);

    function Storm() {
      this.dispose = __bind(this.dispose, this);

      this.createAxis = __bind(this.createAxis, this);

      this.v = __bind(this.v, this);

      this.debugaxis = __bind(this.debugaxis, this);

      this.onResize = __bind(this.onResize, this);

      this.flipBalloon = __bind(this.flipBalloon, this);

      this.onEnterFrame = __bind(this.onEnterFrame, this);

      this.onDocumentMouseMove = __bind(this.onDocumentMouseMove, this);

      this.addPlane = __bind(this.addPlane, this);

      this.init = __bind(this.init, this);
      return Storm.__super__.constructor.apply(this, arguments);
    }

    Storm.prototype.clock = null;

    Storm.prototype.APP_HEIGHT = 800;

    Storm.prototype.APP_WIDTH = 600;

    Storm.prototype.APP_HALF_X = 800 / 2;

    Storm.prototype.APP_HALF_Y = 600 / 2;

    Storm.prototype.mouseX = 0;

    Storm.prototype.mouseY = 0;

    Storm.prototype.followX = 0;

    Storm.prototype.followY = 0;

    Storm.prototype.cubeRefMesh = null;

    Storm.prototype.bal = null;

    Storm.prototype.sl1 = null;

    Storm.prototype.sl2 = null;

    Storm.prototype.sl3 = null;

    Storm.prototype.sl4 = null;

    Storm.prototype.currentScale = 0.3;

    Storm.prototype.speed = 1;

    Storm.prototype.init = function() {
      var ambient, cube;
      this.clock = new THREE.Clock();
      this.APP_WIDTH = $(window).width();
      this.APP_HEIGHT = $(window).height();
      this.renderer = new THREE.WebGLRenderer({
        antialias: true,
        clearAlpha: 1,
        clearColor: 0x000000
      });
      this.renderer.setSize(this.APP_WIDTH, this.APP_HEIGHT);
      this.camera = new THREE.PerspectiveCamera(75, this.APP_WIDTH / this.APP_HEIGHT, 10, 100000);
      this.camera.position.set(0, 0, 40);
      this.camera.updateMatrix();
      this.scene = new THREE.Scene();
      ambient = new THREE.AmbientLight(0xFFFFFF);
      this.scene.add(ambient);
      cube = new THREE.CubeGeometry(1, 1, 1);
      this.cubeRefMesh = new THREE.Mesh(cube, new THREE.MeshLambertMaterial({
        color: 0xFFFFFF
      }));
      this.sl1 = this.addPlane(2000, 227, 1.0, 1100, 0, -100, 0, 0, 0, "models/textures/stormsky/storm/sl1.png");
      this.sl2 = this.addPlane(2000, 227, 1.0, 1100, 0, -110, 0, 0, 0, "models/textures/stormsky/storm/sl2.png");
      this.sl3 = this.addPlane(2100, 327, 1.0, 1000, 0, -120, 0, 0, 0, "models/textures/stormsky/storm/sl3.png");
      this.bal = this.addPlane(212, 315, 0.3, 0, 0, -145, 0, 0, 0, "models/textures/stormsky/storm/balloon.png");
      this.sl4 = this.addPlane(2500, 374, 1.0, 900, 0, -190, 0, 0, 0, "models/textures/stormsky/storm/sl4.png");
      this.scene.add(this.sl1);
      this.scene.add(this.sl2);
      this.scene.add(this.sl3);
      this.scene.add(this.bal);
      this.scene.add(this.sl4);
      document.addEventListener("mousemove", this.onDocumentMouseMove, false);
      this.onResize();
      return this.addChild(this.renderer.domElement);
    };

    Storm.prototype.addPlane = function(w, h, scale, x, y, z, rx, ry, rz, mat) {
      var plane, planeGeom, planeMat, planeText;
      planeGeom = new THREE.PlaneGeometry(w, h, 39, 9);
      planeText = THREE.ImageUtils.loadTexture(mat);
      planeMat = new THREE.MeshLambertMaterial({
        color: 0x00ff80,
        ambient: 0xFFFFFF,
        shading: THREE.SmoothShading,
        map: planeText,
        transparent: true,
        wireframe: false,
        side: THREE.DoubleSide
      });
      plane = new THREE.Mesh(planeGeom, planeMat);
      plane.scale.x = plane.scale.y = plane.scale.z = scale;
      plane.position.x = x;
      plane.position.y = y;
      plane.position.z = z;
      plane.rotation.x = rx;
      plane.rotation.y = ry;
      plane.rotation.z = rz;
      plane.updateMatrix();
      return plane;
    };

    Storm.prototype.initSky = function() {
      var cubeShader, format, material, path, skyText, urls;
      path = "models/textures/stormsky/";
      format = '.png';
      urls = [path + 'posx' + format, path + 'negx' + format, path + 'posy' + format, path + 'negy' + format, path + 'negz' + format, path + 'posz' + format];
      skyText = THREE.ImageUtils.loadTextureCube(urls);
      skyText.format = THREE.RGBFormat;
      cubeShader = new IFLSkyCubeShader;
      cubeShader.uniforms["tCube"].value = skyText;
      cubeShader.uniforms["tFlip"].value = true;
      material = new THREE.ShaderMaterial({
        fragmentShader: cubeShader.fragmentShader,
        vertexShader: cubeShader.vertexShader,
        uniforms: cubeShader.uniforms,
        depthWrite: false,
        side: THREE.BackSide
      });
      this.skyCube = new THREE.Mesh(new THREE.CubeGeometry(10000, 10000, 10000), material);
      this.skyCube.name = "skyCube";
      return this.scene.add(this.skyCube);
    };

    Storm.prototype.onDocumentMouseMove = function(event) {
      this.mouseX = event.clientX - (this.APP_WIDTH / 2);
      return this.mouseY = event.clientY - (this.APP_HEIGHT / 2);
    };

    Storm.prototype.onEnterFrame = function() {
      var delta, moveX, moveY, r;
      delta = this.clock.getDelta();
      moveX = (this.mouseX - this.followX) / 10;
      moveY = (this.mouseY - this.followY) / 10;
      this.followX += moveX;
      this.followY += moveY;
      this.sl4.position.y = this.followY / 40;
      this.bal.position.y = this.followY / 20;
      this.sl3.position.y = this.followY / 30;
      this.sl2.position.y = this.followY / 50;
      this.sl1.position.y = this.followY / 60;
      this.speed = this.followX / (this.APP_WIDTH / 2);
      this.sl4.position.x -= this.speed;
      this.sl3.position.x -= this.speed * 1.1;
      this.sl2.position.x -= this.speed * 1.2;
      this.sl1.position.x -= this.speed * 1.3;
      r = Date.now() * 0.002;
      this.bal.rotation.z = -0.2 * this.speed;
      this.bal.rotation.x = 0.1 * Math.cos(r);
      this.bal.rotation.y = 0.1 * Math.cos(r);
      if (this.followX > 0) {
        this.flipBalloon(0.3);
      } else {
        this.flipBalloon(-0.3);
      }
      this.camera.rotation.y = -this.speed / 40;
      this.renderer.clear();
      this.renderer.render(this.scene, this.camera);
      return TWEEN.update();
    };

    Storm.prototype.flipBalloon = function(scale) {
      var position, target, tween;
      if (scale !== this.currentScale) {
        position = {
          model: this.bal,
          scale: this.currentScale
        };
        target = {
          scale: scale
        };
        tween = new TWEEN.Tween(position).to(target, 700);
        tween.easing(TWEEN.Easing.Quadratic.Out);
        tween.onUpdate(function() {
          return position.model.scale.x = position.scale;
        });
        tween.start();
        return this.currentScale = scale;
      }
    };

    Storm.prototype.onResize = function() {
      this.APP_WIDTH = $(window).width();
      this.APP_HEIGHT = $(window).height();
      this.APP_HALF_X = this.APP_WIDTH / 2;
      this.APP_HALF_Y = this.APP_HEIGHT / 2;
      this.camera.aspect = this.APP_WIDTH / this.APP_HEIGHT;
      this.camera.updateProjectionMatrix();
      return this.renderer.setSize(this.APP_WIDTH, this.APP_HEIGHT);
    };

    Storm.prototype.debugaxis = function(axisLength) {
      this.createAxis(this.v(-axisLength, 0, 0), this.v(axisLength, 0, 0), 0xFF0000);
      this.createAxis(this.v(0, -axisLength, 0), this.v(0, axisLength, 0), 0x00FF00);
      return this.createAxis(this.v(0, 0, -axisLength), this.v(0, 0, axisLength), 0x0000FF);
    };

    Storm.prototype.v = function(x, y, z) {
      return new THREE.Vector3(x, y, z);
    };

    Storm.prototype.createAxis = function(p1, p2, color) {
      var line, lineGeometry, lineMat;
      line = new THREE.Geometry;
      lineGeometry = new THREE.Geometry;
      lineMat = new THREE.LineBasicMaterial({
        color: color,
        lineWidth: 1
      });
      lineGeometry.vertices.push(p1, p2);
      line = new THREE.Line(lineGeometry, lineMat);
      return this.scene.add(line);
    };

    Storm.prototype.dispose = function() {
      return this;
    };

    return Storm;

  })(AbstractChapter);

  Canvas = (function(_super) {

    __extends(Canvas, _super);

    function Canvas() {
      this.initialize = __bind(this.initialize, this);
      return Canvas.__super__.constructor.apply(this, arguments);
    }

    Canvas.prototype.tagName = 'canvas';

    Canvas.prototype.context = null;

    Canvas.prototype.attr = null;

    Canvas.prototype.paused = true;

    Canvas.prototype.initialize = function(w, h) {
      if (w == null) {
        w = 1024;
      }
      if (h == null) {
        h = 768;
      }
      this.attr = {
        width: w,
        height: h
      };
      return Canvas.__super__.initialize.call(this);
    };

    Canvas.prototype.init = function() {
      this.$el.attr(this.attr);
      this.context = this.el.getContext('2d');
      return this;
    };

    return Canvas;

  })(Abstract);

  Hotspot = (function(_super) {

    __extends(Hotspot, _super);

    Hotspot.prototype.template = 'hotspot';

    function Hotspot(vars) {
      this.dispose = __bind(this.dispose, this);
      this.templateVars = vars;
      Hotspot.__super__.constructor.call(this);
    }

    Hotspot.prototype.dispose = function() {
      return this;
    };

    return Hotspot;

  })(Abstract);

  Logo = (function(_super) {

    __extends(Logo, _super);

    function Logo() {
      this.init = __bind(this.init, this);
      return Logo.__super__.constructor.apply(this, arguments);
    }

    Logo.prototype.id = 'logo';

    Logo.prototype.obj = null;

    Logo.prototype.assetLogo = null;

    Logo.prototype.init = function() {
      var _this = this;
      this.canvas = new LogoParticles(100, 100);
      this.assetLogo = new SSAsset('interface', 'logo');
      this.assetLogo.$el.mouseover(this.canvas.show);
      this.assetLogo.$el.mouseout(this.canvas.hide);
      this.assetLogo.$el.click(function() {
        return _this.oz().router.navigateTo('');
      });
      this.addChild(this.assetLogo);
      this.addChild(this.canvas);
      this.canvas.init();
      this.assetChrome = new SSAsset('interface', 'google');
      return this.addChild(this.assetChrome);
    };

    return Logo;

  })(Abstract);

  LogoParticles = (function(_super) {

    __extends(LogoParticles, _super);

    function LogoParticles() {
      this.hide = __bind(this.hide, this);

      this.show = __bind(this.show, this);

      this.onEnterFrame = __bind(this.onEnterFrame, this);

      this.init = __bind(this.init, this);
      return LogoParticles.__super__.constructor.apply(this, arguments);
    }

    LogoParticles.prototype.className = 'logoParticles';

    LogoParticles.prototype.particles = null;

    LogoParticles.prototype.speed = .6;

    LogoParticles.prototype.paused = true;

    LogoParticles.prototype.init = function() {
      var i, p, _i, _results;
      LogoParticles.__super__.init.call(this);
      this.mouseEnabled(false);
      this.particles = [];
      this.paused = true;
      this.$el.css({
        opacity: 0
      });
      _results = [];
      for (i = _i = 0; _i <= 50; i = ++_i) {
        p = new Particle({
          _x: this.rand(0, this.$el[0].width),
          _y: this.rand(0, this.$el[0].height),
          _canvas: this.context,
          _w: this.$el[0].width,
          _h: this.$el[0].height,
          _maxSize: 1.5,
          _speed: this.speed
        });
        _results.push(this.particles.push(p));
      }
      return _results;
    };

    LogoParticles.prototype.onEnterFrame = function() {
      var p, _i, _len, _ref, _results;
      if (this.paused === true) {
        return;
      }
      this.clear();
      _ref = this.particles;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        p.move();
        _results.push(p.draw());
      }
      return _results;
    };

    LogoParticles.prototype.show = function() {
      this.resume();
      return this.$el.animate({
        opacity: 1
      });
    };

    LogoParticles.prototype.hide = function() {
      return this.$el.animate({
        opacity: 0
      }, this.pause);
    };

    LogoParticles.prototype.clear = function() {
      return this.context.clearRect(0, 0, this.$el[0].width, this.$el[0].height);
    };

    LogoParticles.prototype.rand = function(low, high) {
      if (low == null) {
        low = 0;
      }
      if (high == null) {
        high = 1;
      }
      return ((Math.random() * (high - low)) + low) % high;
    };

    return LogoParticles;

  })(Canvas);

  OpeningTitles = (function(_super) {

    __extends(OpeningTitles, _super);

    function OpeningTitles() {
      this.dispose = __bind(this.dispose, this);

      this.init = __bind(this.init, this);

      this.initialize = __bind(this.initialize, this);
      return OpeningTitles.__super__.constructor.apply(this, arguments);
    }

    OpeningTitles.prototype.template = 'openingTitles';

    OpeningTitles.prototype.fluorish = null;

    OpeningTitles.prototype.diamond = null;

    OpeningTitles.prototype.className = 'openingTitles';

    OpeningTitles.prototype.divider = null;

    OpeningTitles.prototype.initialize = function(title, cta, divider) {
      if (divider == null) {
        divider = true;
      }
      this.templateVars = {
        title: title,
        cta: cta
      };
      this.divider = divider;
      return OpeningTitles.__super__.initialize.call(this);
    };

    OpeningTitles.prototype.init = function() {
      var cta, left, leftSpan, right, rightSpan;
      this.fluorish = new SSAsset('interface', 'fluorish');
      this.addChild(this.fluorish, 1);
      this.fluorish.center();
      this.diamond = new SSAsset('interface', 'diamond');
      this.addChild(this.diamond);
      this.diamond.center();
      if (this.divider) {
        cta = this.$el.find('.openingTitlesCTA');
        left = new SSAsset('interface', 'divider_left');
        right = new SSAsset('interface', 'divider_right');
        leftSpan = $("<span class='left'>");
        leftSpan.append(left.$el);
        rightSpan = $("<span class='right'>");
        rightSpan.append(right.$el);
        cta.prepend(leftSpan);
        cta.append(rightSpan);
      }
      return null;
    };

    OpeningTitles.prototype.dispose = function() {
      return this;
    };

    return OpeningTitles;

  })(Abstract);

  Particle = (function() {

    Particle.prototype.dx = 0;

    Particle.prototype.dy = 0;

    Particle.prototype.x = 0;

    Particle.prototype.y = 0;

    Particle.prototype.r = 0;

    Particle.prototype.canvas = null;

    Particle.prototype.w = 0;

    Particle.prototype.h = 0;

    Particle.prototype.image = null;

    Particle.prototype.rColour = null;

    Particle.prototype.angle = null;

    Particle.prototype.mult = 1;

    Particle.prototype.maxSize = 0;

    function Particle(args) {
      this.reset = __bind(this.reset, this);
      this.speed = args._speed;
      this.x = args._x;
      this.y = args._y;
      this.maxSize = args._maxSize;
      this.canvas = args._canvas;
      this.w = args._w;
      this.h = args._h;
      this.rColour = this.rand(0, 1);
      this.angle = 0;
      this.r = this.rand(.1, this.maxSize);
      this.dx = this.rand(-this.speed, this.speed);
      this.dy = this.rand(-this.speed, this.speed);
    }

    Particle.prototype.draw = function() {
      this.canvas.beginPath();
      this.canvas.fillStyle = 'rgba(255,255,255,' + this.rColour + ')';
      this.canvas.arc(this.x, this.y, this.r, 0, Math.PI * 2, true);
      this.canvas.closePath();
      this.canvas.fill();
      return this.rColour -= .005 * this.mult;
    };

    Particle.prototype.rand = function(low, high) {
      if (low == null) {
        low = 0;
      }
      if (high == null) {
        high = 1;
      }
      return ((Math.random() * (high - low)) + low) % high;
    };

    Particle.prototype.move = function() {
      this.x += this.dx;
      this.y -= this.dy;
      if (this.rColour < 0 || this.rColour > 1) {
        this.mult *= -1;
      }
      if (!(this.x < this.w && this.x > -10) || (this.y < 0 || this.y > this.h)) {
        return this.reset();
      }
    };

    Particle.prototype.reset = function() {
      this.x = this.rand(0, this.w);
      this.y = this.rand(0, this.h);
      this.dx = this.rand(-this.speed, this.speed);
      this.dy = this.rand(-this.speed, this.speed);
      this.rColour = this.rand(0, 1);
      this.angle = 0;
      return this.r = this.rand(.1, this.maxSize);
    };

    return Particle;

  })();

  Particles = (function(_super) {

    __extends(Particles, _super);

    function Particles() {
      this.onResize = __bind(this.onResize, this);

      this.onEnterFrame = __bind(this.onEnterFrame, this);

      this.init = __bind(this.init, this);
      return Particles.__super__.constructor.apply(this, arguments);
    }

    Particles.prototype.tagName = 'canvas';

    Particles.prototype.className = 'particles';

    Particles.prototype.particles = null;

    Particles.prototype.paused = true;

    Particles.prototype.init = function() {
      var i, p, _i;
      this.$el[0].width = $(window).innerWidth();
      this.$el[0].height = $(window).innerHeight();
      this.ctx = this.$el[0].getContext('2d');
      this.particles = [];
      for (i = _i = 0; _i <= 150; i = ++_i) {
        p = new Particle({
          _speed: this.speed,
          _x: this.rand(0, this.$el[0].width),
          _y: this.rand(0, this.$el[0].height),
          _r: this.rand(0.2, 2),
          _canvas: this.ctx,
          _w: this.$el[0].width,
          _h: this.$el[0].height
        });
        this.particles.push(p);
      }
      return this.paused = false;
    };

    Particles.prototype.onEnterFrame = function() {
      var p, _i, _len, _ref, _results;
      this.clear();
      _ref = this.particles;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        p.move();
        _results.push(p.draw());
      }
      return _results;
    };

    Particles.prototype.clear = function() {
      return this.ctx.clearRect(0, 0, this.$el[0].width, this.$el[0].height);
    };

    Particles.prototype.rand = function(low, high) {
      if (low == null) {
        low = 0;
      }
      if (high == null) {
        high = 1;
      }
      return ((Math.random() * (high - low)) + low) % high;
    };

    Particles.prototype.onResize = function() {
      this.$el[0].width = $(window).innerWidth();
      this.$el[0].height = $(window).innerHeight();
      return this;
    };

    return Particles;

  })(Abstract);

  SSAsset = (function(_super) {

    __extends(SSAsset, _super);

    function SSAsset() {
      this.dispose = __bind(this.dispose, this);

      this.center = __bind(this.center, this);

      this.css = __bind(this.css, this);

      this.out = __bind(this.out, this);

      this.over = __bind(this.over, this);

      this.init = __bind(this.init, this);
      return SSAsset.__super__.constructor.apply(this, arguments);
    }

    SSAsset.prototype.ss = null;

    SSAsset.prototype.from = null;

    SSAsset.prototype.asset = null;

    SSAsset.prototype.initialize = function(from, asset) {
      this.from = from;
      this.asset = asset;
      return SSAsset.__super__.initialize.call(this);
    };

    SSAsset.prototype.init = function() {
      this.ss = this.oz().ss.get(this.from, this.asset);
      this.$el.css({
        'width': this.ss.width,
        'height': this.ss.height,
        'background': 'url(' + this.ss.image + ')-' + this.ss.x + "px -" + this.ss.y + "px"
      });
      return this.render();
    };

    SSAsset.prototype.over = function(over) {
      var params;
      params = this.oz().ss.get(this.from, over);
      return this.$el.el.css({
        'background-position': -params.x + "px " + -params.y + "px"
      });
    };

    SSAsset.prototype.out = function() {
      return this.$el.el.css({
        'background-position': -this.ss.x + "px " + -this.ss.y + "px"
      });
    };

    SSAsset.prototype.css = function(params) {
      return this.$el.css(params);
    };

    SSAsset.prototype.center = function() {
      return this.$el.css({
        'position': 'absolute',
        'left': '50%',
        'margin-left': -this.ss.width / 2
      });
    };

    SSAsset.prototype.dispose = function() {
      return this;
    };

    return SSAsset;

  })(Abstract);

  SubLoader = (function(_super) {

    __extends(SubLoader, _super);

    function SubLoader() {
      this.dispose = __bind(this.dispose, this);

      this.init = __bind(this.init, this);
      return SubLoader.__super__.constructor.apply(this, arguments);
    }

    SubLoader.prototype.init = function() {
      var square;
      square = new Sonic({
        width: 36,
        height: 36,
        stepsPerFrame: 1,
        trailLength: 1,
        pointDistance: .02,
        fps: 30,
        fillColor: '#DFB583',
        step: function(point, index) {
          this._.beginPath();
          this._.moveTo(point.x, point.y);
          this._.arc(point.x, point.y, index * 3, 0, Math.PI * 2, false);
          this._.closePath();
          return this._.fill();
        },
        path: [['arc', 18, 18, 10, 0, 360]]
      });
      this.addChild(square.canvas);
      return square.play();
    };

    SubLoader.prototype.dispose = function() {
      return this;
    };

    return SubLoader;

  })(Abstract);

  WebCam = (function() {

    WebCam.prototype.stream = null;

    WebCam.prototype.videoDom = null;

    function WebCam() {
      this.dispose = __bind(this.dispose, this);

      this.dom = __bind(this.dom, this);

      this.get = __bind(this.get, this);

      this.onUserMediaError = __bind(this.onUserMediaError, this);

      this.onUserMediaSuccess = __bind(this.onUserMediaSuccess, this);

      this.init = __bind(this.init, this);
      _.extend(this, Backbone.Events);
      this;

    }

    WebCam.prototype.init = function() {
      this.videoDom = $('<video style="display:none;" autoplay="true"/>');
      $('body').prepend(this.videoDom);
      if (!(this.stream != null)) {
        return navigator.getUserMedia({
          video: true,
          audio: true
        }, this.onUserMediaSuccess, this.onUserMediaError);
      } else {
        return this.onUserMediaSuccess();
      }
    };

    WebCam.prototype.onUserMediaSuccess = function(s) {
      if (s == null) {
        s = null;
      }
      this.stream = s || this.stream;
      this.trigger('CAM_READY');
      return this;
    };

    WebCam.prototype.onUserMediaError = function() {
      this.dispose();
      return this;
    };

    WebCam.prototype.get = function() {
      var src;
      if (!(this.stream != null)) {
        this.init();
        return;
      }
      src = window.URL.createObjectURL(this.stream);
      this.dom().src = src;
      return src;
    };

    WebCam.prototype.dom = function() {
      return this.videoDom.get()[0];
    };

    WebCam.prototype.dispose = function() {
      if (this.stream) {
        this.stream.stop();
      }
      this.stream = null;
      return this;
    };

    return WebCam;

  })();

  WebcamCTA = (function(_super) {

    __extends(WebcamCTA, _super);

    WebcamCTA.prototype.tagName = 'webcam_cta';

    WebcamCTA.prototype.template = 'webcam_cta';

    WebcamCTA.prototype.className = 'webcam_cta';

    function WebcamCTA() {
      this.dispose = __bind(this.dispose, this);

      this.show = __bind(this.show, this);

      this.hide = __bind(this.hide, this);

      this.init = __bind(this.init, this);
      this.templateVars = {
        label: this.oz().locale.get('webcam_cta')
      };
      WebcamCTA.__super__.constructor.call(this);
    }

    WebcamCTA.prototype.init = function() {
      this.$el.css({
        'opacity': 0,
        'display': 'none'
      });
      return this;
    };

    WebcamCTA.prototype.hide = function() {
      var _this = this;
      return this.$el.animate({
        'opacity': 0
      }, function() {
        return _this.$el.css({
          'display': 'none'
        });
      });
    };

    WebcamCTA.prototype.show = function() {
      this.$el.css({
        'display': 'block'
      });
      return this.$el.animate({
        'opacity': 1
      });
    };

    WebcamCTA.prototype.dispose = function() {
      return this;
    };

    return WebcamCTA;

  })(Abstract);

  Footer = (function(_super) {

    __extends(Footer, _super);

    function Footer() {
      this.init = __bind(this.init, this);
      return Footer.__super__.constructor.apply(this, arguments);
    }

    Footer.prototype.id = 'footer';

    Footer.prototype.shareMenu = null;

    Footer.prototype.mainMenu = null;

    Footer.prototype.notRated = null;

    Footer.prototype.init = function() {
      this.shareMenu = new ShareMenu;
      this.addChild(this.shareMenu);
      this.mainMenu = new MainMenu;
      this.addChild(this.mainMenu);
      this.notRated = new SSAsset('interface', 'rot_rated');
      this.addChild(this.notRated);
      return this.notRated.$el.css({
        "position": 'absolute',
        "left": '50%',
        "margin-left": -this.notRated.ss.width >> 1,
        "bottom": '38px'
      });
    };

    return Footer;

  })(Abstract);

  MainMenu = (function(_super) {

    __extends(MainMenu, _super);

    MainMenu.prototype.template = 'menu';

    MainMenu.prototype.className = "menu";

    MainMenu.prototype.openMenuBtn = null;

    MainMenu.prototype.buttonList = null;

    MainMenu.prototype.ratings = null;

    MainMenu.prototype.opened = false;

    function MainMenu() {
      this.toggleItem = __bind(this.toggleItem, this);

      this.onMouseMove = __bind(this.onMouseMove, this);

      this.toggleMenu = __bind(this.toggleMenu, this);

      this.init = __bind(this.init, this);
      this.templateVars = {
        open: this.oz().locale.get('menuOpen'),
        official: this.oz().locale.get('menuOfficial'),
        tech: this.oz().locale.get('menuTech'),
        credits: this.oz().locale.get('menuCredits'),
        terms: this.oz().locale.get('menuTerms'),
        privacy: this.oz().locale.get('menuPrivacy'),
        ratings: this.oz().locale.get('menuRatings')
      };
      MainMenu.__super__.constructor.call(this);
    }

    MainMenu.prototype.init = function() {
      var _this = this;
      this.ratings = this.$el.find('.ratings');
      this.buttonList = this.$el.find('.menu_buttons');
      this.openMenuBtn = this.$el.find('.open_menu');
      this.openMenuBtn.find('span').mouseover(this.toggleMenu);
      return this.$el.find(".button").each(function(index, value) {
        return $(value).click(function(event) {
          var deep;
          deep = $(event.currentTarget).attr('deep');
          return _this.oz().appView["static"].changePage(deep);
        });
      });
    };

    MainMenu.prototype.toggleMenu = function() {
      this.toggleItem(this.openMenuBtn);
      this.toggleItem(this.buttonList);
      this.toggleItem(this.ratings);
      this.opened = !this.opened;
      if (this.opened) {
        $('body').bind('mousemove', this.onMouseMove);
      }
      return this;
    };

    MainMenu.prototype.onMouseMove = function(event) {
      if (event.originalEvent.clientY < $(window).innerHeight() - this.$el.height() - 30) {
        $('body').unbind('mousemove', this.onMouseMove);
        return this.toggleMenu();
      }
    };

    MainMenu.prototype.toggleItem = function(item) {
      var visible,
        _this = this;
      visible = item.css('visibility');
      item.css({
        visibility: visible === 'hidden' ? 'visible' : 'hidden'
      });
      return item.animate({
        opacity: visible === 'hidden' ? 1 : 0
      }, function() {
        return item.css({
          visibility: visible === 'hidden' ? 'visible' : 'hidden'
        });
      });
    };

    return MainMenu;

  })(Abstract);

  ShareMenu = (function(_super) {

    __extends(ShareMenu, _super);

    function ShareMenu() {
      this.init = __bind(this.init, this);
      return ShareMenu.__super__.constructor.apply(this, arguments);
    }

    ShareMenu.prototype.template = 'share';

    ShareMenu.prototype.className = 'share_menu';

    ShareMenu.prototype.init = function() {
      var _this = this;
      return this.$el.children().each(function(index, value) {
        var className, icon, iconName;
        iconName = $(value).get(0).tagName.toLowerCase();
        className = $(value).attr('class');
        $(value).remove();
        icon = new SSAsset('interface', iconName);
        _this.addChild(icon);
        icon.$el.addClass(className);
        icon.$el.attr('deep', iconName);
        return icon.$el.click(function(event) {
          var btn, deep;
          btn = $(event.currentTarget);
          deep = btn.attr('deep');
          switch (deep) {
            case 'volume':
              if (btn.hasClass('volume')) {
                AudioManager.pause("music1");
                btn.removeClass('volume');
                return btn.addClass('volumeMute');
              } else {
                AudioManager.resume("music1");
                btn.removeClass('volumeMute');
                return btn.addClass('volume');
              }
              break;
            case 'facebook':
              return Share.facebook(window.location.origin);
            case 'gplus':
              return Share.plus(window.location.origin);
            case 'twitter':
              return Share.twitter(window.location.origin);
          }
        });
      });
    };

    return ShareMenu;

  })(Abstract);

  Credits = (function(_super) {

    __extends(Credits, _super);

    function Credits() {
      this.dispose = __bind(this.dispose, this);

      this.init = __bind(this.init, this);
      return Credits.__super__.constructor.apply(this, arguments);
    }

    Credits.prototype.className = 'staticPage';

    Credits.prototype.template = 'credits';

    Credits.prototype.init = function() {
      return this;
    };

    Credits.prototype.dispose = function() {
      return this;
    };

    return Credits;

  })(Abstract);

  LandingOpenings = (function(_super) {

    __extends(LandingOpenings, _super);

    function LandingOpenings() {
      this.dispose = __bind(this.dispose, this);

      this.init = __bind(this.init, this);

      this.initialize = __bind(this.initialize, this);
      return LandingOpenings.__super__.constructor.apply(this, arguments);
    }

    LandingOpenings.prototype.className = 'staticPage';

    LandingOpenings.prototype.titles = null;

    LandingOpenings.prototype.title = null;

    LandingOpenings.prototype.cta = null;

    LandingOpenings.prototype.dividers = null;

    LandingOpenings.prototype.me = null;

    LandingOpenings.prototype.initialize = function(title, cta, dividers, me) {
      if (dividers == null) {
        dividers = true;
      }
      if (me == null) {
        me = false;
      }
      this.dividers = dividers;
      this.title = title;
      this.cta = cta;
      this.me = me;
      return LandingOpenings.__super__.initialize.call(this);
    };

    LandingOpenings.prototype.init = function() {
      this.titles = new OpeningTitles(this.oz().locale.get(this.title), this.oz().locale.get(this.cta), this.dividers);
      this.addChild(this.titles);
      this.mouseEnabled(this.me);
      return this;
    };

    LandingOpenings.prototype.dispose = function() {
      return this;
    };

    return LandingOpenings;

  })(Abstract);

  ShareBox = (function(_super) {

    __extends(ShareBox, _super);

    function ShareBox() {
      this.dispose = __bind(this.dispose, this);

      this.twitter = __bind(this.twitter, this);

      this.facebook = __bind(this.facebook, this);

      this.gplus = __bind(this.gplus, this);

      this.init = __bind(this.init, this);

      this.initialize = __bind(this.initialize, this);
      return ShareBox.__super__.constructor.apply(this, arguments);
    }

    ShareBox.prototype.className = 'staticPage';

    ShareBox.prototype.template = 'sharebox';

    ShareBox.prototype.url = "";

    ShareBox.prototype.initialize = function(url) {
      this.url = url;
      return ShareBox.__super__.initialize.call(this);
    };

    ShareBox.prototype.init = function() {
      var facebook, gplus, twitter;
      gplus = new SimpleButton("gplus", "GOOGLE PLUS");
      gplus.on("click", this.gplus);
      facebook = new SimpleButton("facebook", "FACEBOOK");
      facebook.on("click", this.facebook);
      twitter = new SimpleButton("twitter", "TWITTER");
      twitter.on("click", this.twitter);
      this.$el.find(".share .buttons").append("<br />");
      this.$el.find(".share .buttons").append(gplus.$el);
      this.$el.find(".share .buttons").append("<br />");
      this.$el.find(".share .buttons").append("<br />");
      this.$el.find(".share .buttons").append("<br />");
      this.$el.find(".share .buttons").append(facebook.$el);
      this.$el.find(".share .buttons").append("<br />");
      this.$el.find(".share .buttons").append("<br />");
      this.$el.find(".share .buttons").append("<br />");
      this.$el.find(".share .buttons").append(twitter.$el);
      this.$el.find(".share .buttons").append("<br />");
      return this.$el.find(".share .buttons").append("<br />");
    };

    ShareBox.prototype.gplus = function() {
      return Share.plus(window.location.origin + this.url);
    };

    ShareBox.prototype.facebook = function() {
      return Share.facebook(window.location.origin + this.url);
    };

    ShareBox.prototype.twitter = function() {
      return Share.twitter(window.location.origin + this.url);
    };

    ShareBox.prototype.dispose = function() {
      return this;
    };

    return ShareBox;

  })(Abstract);

  ShareOverlay = (function(_super) {

    __extends(ShareOverlay, _super);

    function ShareOverlay() {
      this.show = __bind(this.show, this);

      this.init = __bind(this.init, this);
      return ShareOverlay.__super__.constructor.apply(this, arguments);
    }

    ShareOverlay.prototype.className = 'staticPage';

    ShareOverlay.prototype.init = function() {
      return console.log("Share");
    };

    ShareOverlay.prototype.show = function() {
      return console.log("Show");
    };

    return ShareOverlay;

  })(Abstract);

  StaticOverlay = (function(_super) {

    __extends(StaticOverlay, _super);

    function StaticOverlay() {
      this.animateComplete = __bind(this.animateComplete, this);

      this.close = __bind(this.close, this);

      this.changePage = __bind(this.changePage, this);

      this.init = __bind(this.init, this);
      return StaticOverlay.__super__.constructor.apply(this, arguments);
    }

    StaticOverlay.prototype.className = 'staticOverlay';

    StaticOverlay.prototype.page = null;

    StaticOverlay.prototype.opened = false;

    StaticOverlay.prototype.init = function() {
      this.$el.click(this.close);
      this.$el.css({
        'display': 'none',
        'opacity': 0
      });
      return this;
    };

    StaticOverlay.prototype.changePage = function(p, params) {
      this.empty();
      this.page = null;
      switch (p) {
        case 'trailer':
          this.page = new Trailer;
          break;
        case 'credits':
          this.page = new Credits;
          break;
        case 'terms':
          this.page = new Terms;
          break;
        case 'share':
          this.page = new ShareBox(params);
          break;
        case 'opening':
          this.page = new LandingOpenings(params.title, params.cta, params.div || false, params.mouse || false);
      }
      if (this.page == null) {
        return;
      }
      this.addChild(this.page);
      this.$el.css({
        'display': 'table'
      });
      this.$el.animate({
        'opacity': 1
      });
      return this.opened = true;
    };

    StaticOverlay.prototype.close = function(event) {
      return this.$el.animate({
        'opacity': '0'
      }, this.animateComplete);
    };

    StaticOverlay.prototype.animateComplete = function() {
      this.opened = false;
      this.$el.css({
        'display': 'none'
      });
      return this.trigger('staticPageClose');
    };

    return StaticOverlay;

  })(Abstract);

  Terms = (function(_super) {

    __extends(Terms, _super);

    function Terms() {
      this.dispose = __bind(this.dispose, this);

      this.init = __bind(this.init, this);
      return Terms.__super__.constructor.apply(this, arguments);
    }

    Terms.prototype.className = 'staticPage';

    Terms.prototype.template = 'legal';

    Terms.prototype.init = function() {
      return this;
    };

    Terms.prototype.dispose = function() {
      return this;
    };

    return Terms;

  })(Abstract);

  Trailer = (function(_super) {

    __extends(Trailer, _super);

    function Trailer() {
      this.dispose = __bind(this.dispose, this);

      this.init = __bind(this.init, this);
      return Trailer.__super__.constructor.apply(this, arguments);
    }

    Trailer.prototype.className = 'staticPage';

    Trailer.prototype.template = 'trailer';

    Trailer.prototype.init = function() {
      return this;
    };

    Trailer.prototype.dispose = function() {
      return this;
    };

    return Trailer;

  })(Abstract);

  Wrapper = (function(_super) {

    __extends(Wrapper, _super);

    function Wrapper() {
      return Wrapper.__super__.constructor.apply(this, arguments);
    }

    Wrapper.prototype.tagName = 'div';

    Wrapper.prototype.id = 'wrapper';

    return Wrapper;

  })(Abstract);

  AppView = (function(_super) {

    __extends(AppView, _super);

    function AppView() {
      this.addNewView = __bind(this.addNewView, this);

      this.changeView = __bind(this.changeView, this);

      this.changeOpening = __bind(this.changeOpening, this);

      this.looseFocus = __bind(this.looseFocus, this);

      this.startFocus = __bind(this.startFocus, this);

      this.listenToEvents = __bind(this.listenToEvents, this);

      this.render = __bind(this.render, this);
      return AppView.__super__.constructor.apply(this, arguments);
    }

    AppView.prototype.footer = null;

    AppView.prototype.wrapper = null;

    AppView.prototype.area = null;

    AppView.prototype.map = null;

    AppView.prototype.logo = null;

    AppView.prototype["static"] = null;

    AppView.prototype.render = function() {
      this.setElement($('body'));
      /* 
      HOW TO RENDER A TEMPLATE WITH LOCALISED STRING
      
      temp = _.template @oz.templates.get('form')
      @$el.append temp
          test : @oz.locale.get 'string1'
      */

      this.wrapper = new Wrapper;
      this.addChild(this.wrapper);
      this["static"] = new StaticOverlay;
      //this.addChild(this["static"]);
      this.footer = new Footer;
      //this.addChild(this.footer);
      this.logo = new Logo;
      ///this.addChild(this.logo);
      this.listenToEvents();
      return this;
    };

    AppView.prototype.listenToEvents = function() {
      $(window).resize(this.onResize);
      return $(window).blur(this.looseFocus);
    };

    AppView.prototype.startFocus = function() {
      this["static"].off('staticPageClose', this.startFocus);
      this.wrapper.resume();
      return this;
    };

    AppView.prototype.looseFocus = function() {
      this["static"].on('staticPageClose', this.startFocus);
      this.wrapper.pause();
      return this.changeOpening('politePause', 'politePauseCTA', false, false);
    };

    AppView.prototype.changeOpening = function(title, cta, div, mouse) {
      if (div == null) {
        div = true;
      }
      if (mouse == null) {
        mouse = true;
      }
      return this["static"].changePage('opening', {
        title: title,
        cta: cta,
        div: div,
        mouse: mouse
      });
    };

    AppView.prototype.changeView = function(area, sub) {
      var _this = this;
      if (this["static"].opened != null) {
        this.addNewView(area, sub);
        return;
      }
      this["static"].on('staticPageClose', function() {
        return _this.addNewView(area, sub);
      });
      return this["static"].close();
    };

    AppView.prototype.addNewView = function(area, sub) {
      this.wrapper.empty();
      this["static"].off();
      if (sub != null) {
        switch (sub) {
          case "cutout":
            this.area = new Cutout;
            break;
          case "zoetrope":
            this.area = new Zoetrope;
        }
      } else {
        switch (area) {
          case "":
            this.area = new Carnival;
            break;
          case 'carnival':
            this.area = new Carnival;
            break;
          case 'storm':
            this.area = new Storm;
            break;
          case "loading":
            this.area = new Loading;
            break;
          default:
            this.area = null;
        }
      }
      if (!!this.area) {
        return this.wrapper.addChild(this.area);
      }
    };

    return AppView;

  })(Abstract);

  $(function() {
    var addStats, getLocale, initApp, initEnterFrame, initObjects, lang, loadedFiles, onBaseAssetsComplete, parseLoadedFiles, view,
      _this = this;
    _.templateSettings = {
      interpolate: /\{\{(.+?)\}\}/g
    };
    view = window || document;
    window.URL = window.URL || window.webkitURL;
    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
    loadedFiles = null;
    lang = '';
    onBaseAssetsComplete = function(event) {
      view.oz.baseAssets.off("COMPLETE", onBaseAssetsComplete);
      return parseLoadedFiles(event);
    };
    parseLoadedFiles = function(files) {
      var a, value;
      loadedFiles = {};
      loadedFiles.locales = [];
      for (a in files) {
        if (!__hasProp.call(files, a)) continue;
        value = files[a];
        if (value.src.indexOf("locale/") > -1) {
          loadedFiles.locales.push(value);
        }
      }
      return initObjects();
    };
    initObjects = function() {

      view.oz.locale = new Locale(loadedFiles.locales);
      view.oz.templates = new Templates(view.oz.baseAssets.get('templates').result);
      view.oz.cam = new WebCam;
      view.oz.appView = new AppView;
      view.oz.router = new Router;
      view.oz.shortURL = new ShortURL;
      return getLocale();
    };
    getLocale = function() {
      lang = navigator.language || navigator.userLanguage;
      lang = 'en'
      view.oz.locale.set(lang);
      return initApp();
    };
    initApp = function() {
      view.oz.appView.render();
      view.oz.appView.addNewView('carnival')
      view.oz.router.start();
      initEnterFrame();
      return addStats();
      /*AudioManager.play "music1"
      */

    };
    initEnterFrame = function() {
      window.requestAnimationFrame(initEnterFrame);
      view.oz.stats.begin();
      view.oz.appView.onEnterFrame();
      return view.oz.stats.end();
    };
    addStats = function() {
      view.oz.stats.domElement.style.position = 'absolute';
      view.oz.stats.domElement.style.top = '0px';
      return view.oz.appView.addChild(view.oz.stats.domElement);
    };
    view.oz = {
      BASE_PATH: view.location.origin + "/",
      ss: new CollectionSpriteSheets,
      baseAssets: new BaseAssets,
      stats: new Stats
    };

    view.oz.baseAssets.on("COMPLETE", onBaseAssetsComplete);
    return view.oz.baseAssets.init(['locales', 'homeAssets']);
  });

}).call(this);
